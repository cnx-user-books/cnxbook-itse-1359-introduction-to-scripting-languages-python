<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Itse1359-2255-Color-Animated Fly Through an HSV Color Cylinder</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m52752</md:content-id>
  <md:title>Itse1359-2255-Color-Animated Fly Through an HSV Color Cylinder</md:title>
  <md:abstract>This module explains how to make an animated fly through an HSV color cylinder.</md:abstract>
  <md:uuid>794b2144-1fc6-4203-b98b-6a6249c5fdd1</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
<emphasis id="Table_of_contents" effect="bold">

Table of contents

</emphasis>


</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1004">
<link id="a1004" target-id="General_background_information">

General background information

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1005">
<link id="a1005" target-id="A_screen_shot_taken_at_the_beginning">

A screen shot taken at the beginning

</link>


</item>


		

<item id="li1006">
<link id="a1006" target-id="Six_reduced_screen_shots_taken_at_random">

Six screen shots taken at random

</link>


</item>


	

</list>


	

</item>


	

<item id="li1007">
<link id="a1007" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1004" list-type="bulleted">

		

<item id="li1008">
<link id="a1008" target-id="The_preliminaries">

The preliminaries

</link>


</item>


		

<item id="li1009">
<link id="a1009" target-id="Populate_the_pixel_array">

Populate the pixel array

</link>


</item>


		

<item id="li1010">
<link id="a1010" target-id="Increment_the_hue">

Increment the hue

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="The_remaining_code">

The remaining code

</link>


</item>


	

</list>


	

</item>



	

<item id="li1012">
<link id="a1012" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="Complete_program_listings">

Complete program listing

</link>


</item>



	

<item id="li1014">
<link id="a1014" target-id="Miscellaneous">

Miscellaneous

</link>


</item>





</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules on Python designed for 
teaching 

<emphasis id="em1000" effect="italics">
ITSE 1359 Introduction to Scripting Languages: Python

</emphasis>
 at Austin Community 
College in Austin, TX. This module concentrates on programming with 

<emphasis id="strong1000" effect="bold">

	Pygame

</emphasis>
.

</para>


	
	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1001">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1015">
<link id="a1015" target-id="Figure_1">

Figure 1.

</link>

 A screen shot taken at the beginning.

</item>


		

<item id="li1016">
<link id="a1016" target-id="Figure_2">

Figure 2.

</link>

 Six reduced screen shots taken at random. 

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1017">
<link id="a1017" target-id="Listing_1">

Listing 1.

</link>

 The preliminaries. 

</item>


		

<item id="li1018">
<link id="a1018" target-id="Listing_2">

Listing 2.

</link>

 Populate the pixel array. 

</item>


		

<item id="li1019">
<link id="a1019" target-id="Listing_3">

Listing 3.

</link>

 Increment the hue. 

</item>


		

<item id="li1020">
<link id="a1020" target-id="Listing_4">

Listing 4.

</link>

 The remaining code. 

</item>


		

<item id="li1021">
<link id="a1021" target-id="Listing_5">

Listing 5.

</link>

 Complete program listing. 

</item>



	

</list>




	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1002">
In an earlier module, you learned about the 

<emphasis id="em1001" effect="italics">
HSV color space

</emphasis>
 and how 
that color space can be envisioned as a 3D cylinder with a radius of 100 units 
and a height of 100 units. In a different module, you learned how to write a 
program that takes an animated dive down through the center of the cylinder and 
displays the colors at each of 100 horizontal slices through the cylinder. When 
the animation reaches the bottom 

<emphasis id="em1002" effect="italics">
(black)

</emphasis>
 surface, it resets to the top 
of the cylinder and the cycle repeats.

</para>




<para id="p1003">
In this module, you will learn how to write a program that animates a 
circular trip through the interior of an HSV cylinder. Each frame displays a
vertical slice from the center to the edge of the cylinder. The angle of the
slice increases by one degree clockwise each frame until it reaches 359 degrees. Then it resets to 0
degrees and the cycle repeats.

</para>




<section id="h21001">
<title>
<emphasis id="A_screen_shot_taken_at_the_beginning" effect="bold">

A screen shot taken at the 
beginning

</emphasis>


</title>




<para id="p1004">



<link id="a1022" target-id="Figure_1">

Figure 1

</link>

 shows a screen shot of the first slice taken at the beginning of the 
trip. The top of the image represents the top of the HSV cylinder and the bottom 
of the image represents the bottom of the cylinder. The left side of the image 
represents the center line down through the cylinder. The right side of the 
image represents the outer surface of the cylinder for a hue angle of zero 
degrees.

</para>





<para id="p1005">
<emphasis id="strong1001" effect="bold">
<emphasis id="Figure_1" effect="bold">

Figure 1.

</emphasis>

 A screen shot taken at the beginning.

</emphasis>
</para>




<para id="p1006">
<media id="media1000" alt="missing image" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/1359-2255-a.jpg" width="207" height="234"/>
</media>


</para>





<para id="p1007">
The image in 

<link id="a1023" target-id="Figure_1">

Figure 1

</link>

 should match what you would see if 
you open the 

<link id="a1024" url="http://www.colorpicker.com/">

ColorPicker

</link>

 web page and set the value in the H-box to 0. 
This program essentially replicates the process of opening the 

<link id="a1025" url="http://www.colorpicker.com/">

ColorPicker

</link>

 
web page and slowly dragging the hue-slider from top to bottom.

</para>




</section>
<section id="h21002">
<title>
<emphasis id="Six_reduced_screen_shots_taken_at_random" effect="bold">

Six screen shots taken at 
random

</emphasis>


</title>




<para id="p1008">
<link id="a1026" target-id="Figure_2">

Figure 2

</link>

 shows six reduced screen shots taken at random during the trip.

</para>





<para id="p1009">
<emphasis id="strong1002" effect="bold">
<emphasis id="Figure_2" effect="bold">

Figure 2.

</emphasis>

 Six reduced screen shots taken at random.

</emphasis>
</para>




<para id="p1010">
<media id="media1001" alt="missing image" display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/1359-2255-c.jpg" width="320" height="240"/>
</media>


</para>



	

<para id="p1011">
The images in 

<link id="a1027" target-id="Figure_2">

Figure 2

</link>

 should match what you 
	would see if 
you open the 

<link id="a1028" url="http://www.colorpicker.com/">

ColorPicker

</link>

 web page and set the value in the H-box to 
	six different non-zero values. However, I can't tell you what those values 
	are because the screen shots were taken at random times during the running 
	of the program. It shouldn't be too difficult to match them by sliding the 
	hue-slider up and down on the 

<link id="a1029" url="http://www.colorpicker.com/">

ColorPicker

</link>

 
	web page and that might be a very educational exercise.

</para>


	

</section>
</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1012">
I will explain this program in fragments. A complete listing of the 
	program is provided in 

<link id="a1030" target-id="Listing_5">

Listing 5

</link>

.

</para>




<section id="h21003">
<title>
<emphasis id="The_preliminaries" effect="bold">

The preliminaries

</emphasis>


</title>




<para id="p1013">
The first fragment is shown in 

<link id="a1031" target-id="Listing_1">

Listing 1

</link>

. Code similar to the code in 


<link id="a1032" target-id="Listing_1">

Listing 1

</link>

 has been explained in 
earlier modules. Therefore, no explanation of that code beyond the embedded 
comments should be required in this module.

</para>





<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


<thead id="thead1000">
<row id="tr1000">



<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1.

</emphasis>

 The preliminaries.


</entry>
</row>
</thead>


<tbody id="tbody1000">
<row id="tr1001">
<entry id="td1000">



<code id="pre1000" display="block">import pygame #Import required library
pygame.init() #Initialize imported pygame modules

quit = False #Initialize termination control variable.
pygame.display.set_caption("Hsv02.py") #Set the window caption
FRAMERATE = 100 #Used to control the maximum frame rate.
WIDTH = 200 #Width of output window
HEIGHT = 200 #Height of output window

#Initialize HSVA parameters
hue = 0
saturation = 0
value = 0
saturationRange = 100 
valueRange = 100 

#Create and set the display mode on the base surface.
baseSurf = pygame.display.set_mode([WIDTH,HEIGHT]) 
clock = pygame.time.Clock() #Create an object to help track time

#Get an array that wraps the pixels on the base surface making it possible
# to set the color of each pixel individually based on its coordinate location.
pxarray = pygame.PixelArray(baseSurf)

#Create a color object for use in transforming from HSVA to RGB
color = pygame.Color(0,0,0)

#Enter the runtime loop
while not quit:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit = True #Make this the final iteration of the runtime loop.</code>




</entry>
</row>
</tbody>


</tgroup>
</table>




<para id="p1014">
There is one thing in 

<link id="a1033" target-id="Listing_1">

Listing 1

</link>

 that is worthy of note. Although the 
FRAMERATE is set to 100, my computer isn't capable of achieving a frame rate 
even close to 100 
frames per second for this program. Changing the color of large numbers of 
pixels during each frame using a


<link id="a1034" url="http://www.pygame.org/docs/ref/pixelarray.html">

pygame.PixelArray

</link>

 
object requires a considerable amount of computer time. Thus, the frame rate of this program 
on my computer is limited by the time required to change the colors of the 
pixels during each iteration of the runtime loop.

</para>




<para id="p1015">
There is another approach using


<link id="a1035" url="http://www.pygame.org/docs/ref/surfarray.html">

pygame.surfarray

</link>

 
that is reportedly much faster. However, according to the documentation, 

<emphasis id="em1003" effect="italics">
"This module will only be functional when pygame can use the external NumPy or Numeric packages."

</emphasis>



<link id="a1036" url="http://www.numpy.org/">

NumPy

</link>

 and 

<link id="a1037" url="http://www.scipy.org/">


SciPy

</link>

 will be topics of future modules.

</para>




</section>
<section id="h21004">
<title>
<emphasis id="Populate_the_pixel_array" effect="bold">

Populate the pixel array

</emphasis>


</title>




<para id="p1016">
    The code in 

<link id="a1038" target-id="Listing_2">

Listing 2

</link>

 uses a pair of nested 

<emphasis id="strong1003" effect="bold">
for

</emphasis>
 loops to 
populate the pixel array from left to right, top to bottom. 
    The initial display is for a vertical slice from the center of
    the cylinder to red on the right for a hue angle of zero degrees. As you 
will see shortly, during each subsequent iteration of the runtime loop,
    the slice is rotated about the center by increasing the hue angle by one degree clockwise.

</para>




<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


<thead id="thead1001">
<row id="tr1002">



<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2.

</emphasis>

 Populate the pixel array.


</entry>
</row>
</thead>


<tbody id="tbody1001">
<row id="tr1003">
<entry id="td1001">



<code id="pre1001" display="block">    for xCnt in range(WIDTH):
        for yCnt in range(HEIGHT):
            saturation = xCnt * saturationRange/WIDTH
            
            value = valueRange - yCnt * valueRange/HEIGHT #move origin to bottom
            color.hsva = [hue,saturation,value]
            pxarray[xCnt,yCnt] = color</code>




</entry>
</row>
</tbody>


</tgroup>
</table>




<para id="p1017">
Code like that shown in 

<link id="a1039" target-id="Listing_2">

Listing 2

</link>

 should be familiar to you by now and a 
detailed explanation should not be required. 

</para>




</section>
<section id="h21005">
<title>
<emphasis id="Increment_the_hue" effect="bold">

Increment the hue

</emphasis>


</title>




<para id="p1018">
    Having exited the 

<emphasis id="strong1004" effect="bold">
for

</emphasis>
 loops but still inside the runtime 
loop, the code in 

<link id="a1040" target-id="Listing_3">

Listing 3

</link>

 increments the hue angle by one degree during each iteration of the runtime loop. 
The hue resets to zero degrees in the next iteration after reaching 359 degrees 
and the cycle repeats.

</para>




<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


<thead id="thead1002">
<row id="tr1004">



<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3.

</emphasis>

 Increment the hue.


</entry>
</row>
</thead>


<tbody id="tbody1002">
<row id="tr1005">
<entry id="td1002">



<code id="pre1002" display="block">
    if hue &lt; 359:
        hue += 1
    else:
        hue = 0</code>




</entry>
</row>
</tbody>


</tgroup>
</table>




</section>
<section id="h21006">
<title>
<emphasis id="The_remaining_code" effect="bold">

The remaining code

</emphasis>


</title>




<para id="p1019">
The remaining code in the program is shown in 

<link id="a1041" target-id="Listing_4">

Listing 4

</link>

. There is nothing new 
in this code so further explanation should not be required.

</para>




<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


<thead id="thead1003">
<row id="tr1006">



<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4.

</emphasis>

 The remaining code.


</entry>
</row>
</thead>


<tbody id="tbody1003">
<row id="tr1007">
<entry id="td1003">



<code id="pre1003" display="block">    #Display baseSurf
    pygame.display.flip()
    
    clock.tick(FRAMERATE) #Control the frame rate in frames per second

pygame.quit() #Terminate the program outside the runtime loop</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1020">
I encourage you to copy the code from 

<link id="a1042" target-id="Listing_5">

Listing 5

</link>

. Execute the code and confirm 
that you get results similar to those shown in 

<link id="a1043" target-id="Figure_2">

Figure 2

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




</section>
<section id="h11005">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1021">
A complete listing of the program is provided in 

<link id="a1044" target-id="Listing_5">

Listing 5

</link>

.

</para>





<para id="p1022">
<emphasis id="strong1005" effect="bold">
<emphasis id="Listing_5" effect="bold">

Listing 5.

</emphasis>

 Complete program listing.

</emphasis>
</para>





<code id="pre1004" display="block">"""
File Hsv02.py
This program animates a fly through an HSVA cylinder. Each frame displays a
vertical slice from the center to the edge of the cylinder. The angle of the
slice increases by one degree clockwise (looking down on the top of the
cylinder) each frame until it reaches 359 degrees. Then it resets to 0
degrees and the cycle repeats.
================================================================================
"""
import pygame #Import required library
pygame.init() #Initialize imported pygame modules

quit = False #Initialize termination control variable.
pygame.display.set_caption("Hsv02.py") #Set the window caption
FRAMERATE = 100 #Used to control the maximum frame rate.
WIDTH = 200 #Width of output window
HEIGHT = 200 #Height of output window

#Initialize HSVA parameters
hue = 0
saturation = 0
value = 0
saturationRange = 100 
valueRange = 100 

#Create and set the display mode on the base surface.
baseSurf = pygame.display.set_mode([WIDTH,HEIGHT]) 
clock = pygame.time.Clock() #Create an object to help track time

#Get an array that wraps the pixels on the base surface making it possible
# to set the color of each pixel individually based on its coordinate location.
pxarray = pygame.PixelArray(baseSurf)

#Create a color object for use in transforming from HSVA to RGB
color = pygame.Color(0,0,0)

#Enter the runtime loop
while not quit:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit = True #Make this the final iteration of the runtime loop.
        
    #Populate the pixel array from left to right, top to bottom. 
    # The initial display is for a vertical slice from the center of
    # the cylinder to red on the right. During each subsequent iteration,
    # the slice is rotated about the center by one degree clockwise.
    for xCnt in range(WIDTH):
        for yCnt in range(HEIGHT):
            saturation = xCnt * saturationRange/WIDTH
            
            value = valueRange - yCnt * valueRange/HEIGHT #move origin to bottom
            color.hsva = [hue,saturation,value]
            pxarray[xCnt,yCnt] = color

    #Increment the hue by one degree during each iteration of the runtime loop.
    if hue &lt; 359:
        hue += 1
    else:
        hue = 0
    
    #Display baseSurf
    pygame.display.flip()
    
    clock.tick(FRAMERATE) #Control the frame rate in frames per second

pygame.quit() #Terminate the program outside the runtime loop
</code>






	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1023">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1006" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1007" list-type="bulleted">

					

<item id="li1022">
Module name: Itse1359-2255-Color-Animated Fly Through an 
					HSV Color Cylinder

</item>


					

<item id="li1023">
File: Itse1359-2255.htm


</item>


					

<item id="li1024">
Published: 01/08/15

</item>




<item id="li1025">
Revised: 02/08/16

</item>


				

</list>


</note>






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1007" effect="bold">
Disclaimers:

</emphasis>
<para id="p1024">
<emphasis id="strong1008" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1025">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1026">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1027">
<emphasis id="strong1009" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


</note>



	


<para id="p1028">
-end- 

</para>






</section>
</content>




</document>