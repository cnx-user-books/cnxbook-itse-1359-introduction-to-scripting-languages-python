<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Itse1359-1440-Class Variables</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m51459</md:content-id>
  <md:title>Itse1359-1440-Class Variables</md:title>
  <md:abstract>I promised in an earlier module that I would revisit and explain the difference between class variables and instance variables in classes and objects. An earlier module explained instance variables in detail. You will learn some of the details regarding class variables in this module.</md:abstract>
  <md:uuid>88f5bdd0-474b-4f69-806d-a383346db53a</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="What_you_have_learned">

What you have learned

</link>


</item>


		

<item id="li1002">
<link id="a1002" target-id="What_you_will_learn">

What you will learn

</link>


</item>


		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Images">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>



		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1006">
<link id="a1006" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1008">
<link id="a1008" target-id="Late_modification_of_class">

Late modification of class

</link>


<list id="ul1004" list-type="bulleted">

			

<item id="li1009">
<link id="a1009" target-id="A_simple_class_definition">

A simple class definition

</link>


</item>


			

<item id="li1010">
<link id="a1010" target-id="Instantiate_and_display_two_objects">

Instantiate and display two objects

</link>


</item>


			

<item id="li1011">
<link id="a1011" target-id="Add_a_class_variable_directly">

Add a class variable directly

</link>


</item>


			

<item id="li1012">
<link id="a1012" target-id="Add_a_class_variable_via_an_object">

Add a class variable via an object

</link>


</item>


			

<item id="li1013">
<link id="a1013" target-id="Display_both_class_variables_via_one_object">

Display both class variables via one object

</link>


</item>


			

<item id="li1014">
<link id="a1014" target-id="Display_both_class_variables_via_the_other_object">

Display both class variables via the other object

</link>


</item>


		

</list>


		

</item>


		

<item id="li1015">
<link id="a1015" target-id="Typical_class_variable_usage">

Typical class variable usage

</link>


<list id="ul1005" list-type="bulleted">

			

<item id="li1016">
<link id="a1016" target-id="The_class_definition">

The class definition

</link>


</item>


			

<item id="li1017">
<link id="a1017" target-id="Instantiate_two_objects_from_the_class">

Instantiate two objects from the class

</link>


</item>


			

<item id="li1018">
<link id="a1018" target-id="Modify_class_variable_using_object">

Modify class variable using object

</link>


</item>


			

<item id="li1019">
<link id="a1019" target-id="Modify_the_class_variable_using_the_class_name">

Modify the class variable using the class name

</link>


</item>


			

<item id="li1020">
<link id="a1020" target-id="A_word_of_caution_is_in_order">

A word of caution is in order

</link>


</item>


		

</list>


		

</item>


		

<item id="li1021">
<link id="a1021" target-id="Shadowing_or_hiding_a_class_variable">

Shadowing or hiding a class variable

</link>


<list id="ul1006" list-type="bulleted">

			

<item id="li1022">
<link id="a1022" target-id="Class_definition_with_a_shadowing_method">

Class definition with a shadowing method

</link>


</item>


			

<item id="li1023">
<link id="a1023" target-id="Instantiate_and_display_classVar_in_two_objects">

Instantiate and display classVar in two objects

</link>


</item>


			

<item id="li1024">
<link id="a1024" target-id="Modify_classVar_in_one_object">

Modify classVar in one object

</link>


</item>


			

<item id="li1025">
<link id="a1025" target-id="Modify_the_contents_of_the_class_variable">

Modify the contents of the class variable

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1026">
<link id="a1026" target-id="Run_the_program">

Run the programs

</link>


</item>


	

<item id="li1027">
<link id="a1027" target-id="Visualize_the_programs">

Visualize the programs

</link>


</item>


	

<item id="li1028">
<link id="a1028" target-id="Complete_program_listings">

Complete program listings

</link>


</item>



	

<item id="li1029">
<link id="a1029" target-id="Miscellaneous">

Miscellaneous

</link>


</item>





</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules on Python designed for 
teaching 

<emphasis id="em1000" effect="italics">
ITSE 1359 Introduction to Scripting Languages: Python

</emphasis>
 at Austin Community 
College in Austin, TX. 

</para>




<section id="h21000">
<title>
<emphasis id="What_you_have_learned" effect="bold">

What you have learned

</emphasis>


</title>




<para id="p1001">
Earlier modules provided 

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1030">
an overview of classes and objects in Python,

</item>


	

<item id="li1031">
an explanation of the 

<emphasis id="strong1000" effect="bold">
self

</emphasis>
 word in Python class definitions, 
	and

</item>


	

<item id="li1032">
a detailed explanation of instance variables in Python class 
	definitions.

</item>




</list>




<para id="p1002">
You have also learned that although other OO languages such as Java and C++ 
use terminology that is common with Python terminology, such as 

<emphasis id="em1001" effect="italics">
class

</emphasis>
, 

<emphasis id="em1002" effect="italics">

object

</emphasis>
, 

<emphasis id="em1003" effect="italics">
class variable

</emphasis>
, and 

<emphasis id="em1004" effect="italics">
instance variable

</emphasis>
, those 
terms have significantly different meanings in Python than they do in many other 
OO languages.

</para>




</section>
<section id="h21001">
<title>
<emphasis id="What_you_will_learn" effect="bold">

What you will learn

</emphasis>


</title>




<para id="p1003">
I promised in an earlier module that I would revisit and explain the 
difference between 

<emphasis id="em1005" effect="italics">
class variables

</emphasis>
 and 

<emphasis id="em1006" effect="italics">
instance variables

</emphasis>
 in 
classes and objects. An earlier module explained instance variables in detail.
You will learn some of the details regarding class variables in this module.


</para>


	

</section>
<section id="h21002">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1004">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
	and the Listings while you are reading about them.

</para>




<para id="p1005">
<emphasis id="em1007" effect="italics">
(Note to blind and visually impaired students: most of the Figures and all of the 
Listings in 
this module are presented in plain text format and should be accessible using an 
audio screen reader or a braille display. Note however that the required 
indentation may not be properly represented by an audio screen reader.)

</emphasis>
</para>


	

<section id="h31000">
<title>
<emphasis id="Images" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1008" list-type="bulleted">



<item id="li1033">
<link id="a1030" target-id="Image_3">

Figure 1

</link>

. Output from the code in Listing 2.

</item>




<item id="li1034">
<link id="a1031" target-id="Image_7">

Figure 2

</link>

. Output of the code in Listing 5.

</item>




<item id="li1035">
<link id="a1032" target-id="Image_10">

Figure 3

</link>

. Output from the code in Listing 7.

</item>




<item id="li1036">
<link id="a1033" target-id="Image_12">

Figure 4

</link>

. Output from the code in Listing 8.

</item>




<item id="li1037">
<link id="a1034" target-id="Image_14">

Figure 5

</link>

. Output from the code in Listing 9.

</item>




<item id="li1038">
<link id="a1035" target-id="Image_16">

Figure 6

</link>

. Output from the code in Listing 10.

</item>




<item id="li1039">
<link id="a1036" target-id="Image_19">

Figure 7

</link>

. Output from the coded in Listing 12.

</item>




<item id="li1040">
<link id="a1037" target-id="Image_21">

Figure 8

</link>

. Output from the code in Listing 13.

</item>




<item id="li1041">
<link id="a1038" target-id="Image_23">

Figure 9

</link>

. Output from the code in Listing 14.

</item>




<item id="li1042">
<link id="a1039" target-id="Image_25">

Figure 10

</link>

. Output from the code in Listing 15.

</item>




<item id="li1043">
<link id="a1040" target-id="Image_27">

Figure 11

</link>

. Output from the code in Listing 16.

</item>




<item id="li1044">
<link id="a1041" target-id="Image_29">

Figure 12

</link>

. Output from the code in Listing 17.

</item>

	

</list>




</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


<list id="ul1009" list-type="bulleted">



<item id="li1045">
<link id="a1042" target-id="Image_1">

Listing 1

</link>

. A simple class definition. 

</item>




<item id="li1046">
<link id="a1043" target-id="Image_2">

Listing 2

</link>

. Instantiate and display two objects.

</item>




<item id="li1047">
<link id="a1044" target-id="Image_4">

Listing 3

</link>

. Add a class variable directly.

</item>




<item id="li1048">
<link id="a1045" target-id="Image_5">

Listing 4

</link>

. Add a class variable via an object.

</item>




<item id="li1049">
<link id="a1046" target-id="Image_6">

Listing 5

</link>

. Display both class variables via one object.

</item>




<item id="li1050">
<link id="a1047" target-id="Image_8">

Listing 6

</link>

. Display both class variables via the other object.

</item>




<item id="li1051">
<link id="a1048" target-id="Image_9">

Listing 7

</link>

. The class definition.

</item>




<item id="li1052">
<link id="a1049" target-id="Image_11">

Listing 8

</link>

. Instantiate two objects from the class.

</item>




<item id="li1053">
<link id="a1050" target-id="Image_13">

Listing 9

</link>

. Modify class variable using object.

</item>




<item id="li1054">
<link id="a1051" target-id="Image_15">

Listing 10

</link>

. Modify the class variable using the class name.

</item>




<item id="li1055">
<link id="a1052" target-id="Image_17">

Listing 11

</link>

. Class definition with a shadowing method.

</item>




<item id="li1056">
<link id="a1053" target-id="Image_18">

Listing 12

</link>

. Instantiate and display classVar in two objects.

</item>




<item id="li1057">
<link id="a1054" target-id="Image_20">

Listing 13

</link>

. Modify classVar in one object.

</item>




<item id="li1058">
<link id="a1055" target-id="Image_22">

Listing 14

</link>

. Modify the contents of the class variable.

</item>




<item id="li1059">
<link id="a1056" target-id="Image_24">

Listing 15

</link>

. Complete program listing. 

</item>




<item id="li1060">
<link id="a1057" target-id="Image_26">

Listing 16

</link>

. Complete program listing. 

</item>




<item id="li1061">
<link id="a1058" target-id="Image_28">

Listing 17

</link>

. Complete program listing. 

</item>




</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1006">
In Java and C++, once you define and compile a class, that class, 

<emphasis id="em1008" effect="italics">
(which is 
the blueprint for an object)

</emphasis>
, can only be modified by recompiling the class. In 
other words, once compiled, a class is intended to be stable and cannot be modified at runtime.


<emphasis id="em1009" effect="italics">
(At lease I don't know how to modify a Java class definition at runtime.)

</emphasis>
</para>




<para id="p1007">
Also in Java and C++, once you instantiate an object from a class, you cannot 
modify the structure of the object. You can modify the values of the data stored 
in the object but the structure of the object is stable and cannot be modified 
at runtime. 

<emphasis id="em1010" effect="italics">
(At least I don't know how to modify the structure of a Java 
object at runtime.) 

</emphasis>
Among other things, you cannot add new variables to an existing 
object.

</para>




<para id="p1008">
Along that line, the structure of an object in Java and C++ is explicitly 
tied to the blueprint provided by the class from which it was instantiated. 
There is a fixed relationship between the object and the class from which it was 
instantiated.

</para>




<para id="p1009">
None of that is true in Python. You learned in an earlier module that you can 
modify the structure of a Python object at runtime after it is instantiated. By 
that I mean that you can add new instance variables to an object such that the 
structure of the object no longer matches the blueprint provided by the class 
from which it was instantiated. 

</para>




<para id="p1010">
You will learn in this module that you can modify the blueprint provided by 
the class at runtime after the class has been used to instantiate one or more 
objects.

</para>


	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1011">
I will discuss three different programs in this module. A complete 
	listing of the first program is provided in 

<link id="a1059" target-id="Image_24">

Listing 15

</link>

. The output from that 
	program is shown in 

<link id="a1060" target-id="Image_25">

Figure 10

</link>

. 

</para>




<para id="p1012">
I will break each program down and discuss it in fragments. The first 
fragment is shown in 

<link id="a1061" target-id="Image_1">

Listing 1

</link>

.

</para>


	

<section id="h21003">
<title>
<emphasis id="Late_modification_of_class" effect="bold">

Late modification of class

</emphasis>


</title>




<para id="p1013">
Let me begin by saying that this is probably not how the designers of Python 
intended for classes and objects to be used. However, if you are going to 
program using classes and objects in Python, you need to understand them.

</para>




<section id="h31002">
<title>
<emphasis id="A_simple_class_definition" effect="bold">

A simple class definition

</emphasis>


</title>




<para id="p1014">
<link id="a1062" target-id="Image_1">

Listing 1

</link>

 shows a simple Python class definition for a class named 

<emphasis id="strong1001" effect="bold">

TestClass

</emphasis>
. This class definition does not define any class variables 
and does not define any 
instance variables. It does define a method named 

<emphasis id="strong1002" effect="bold">
addClassVar

</emphasis>
, which I will discuss in more detail later.

</para>




	

<table id="table1000" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Image_1" effect="bold">

Listing 1

</emphasis>

. A simple class 
				definition.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">




<code id="pre1000" display="block">
class TestClass(object):
    def addClassVar(self,data):
        TestClass.classVar02 = data
</code>





				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1015">
An object instantiated from the class in 

<link id="a1063" target-id="Image_1">

Listing 1

</link>

 will not contain any 
	data -- no class variables and no instance variables.

</para>




</section>
<section id="h31003">
<title>
<emphasis id="Instantiate_and_display_two_objects" effect="bold">

Instantiate and display two 
objects

</emphasis>


</title>




<para id="p1016">
The code in 

<link id="a1064" target-id="Image_2">

Listing 2

</link>

 instantiates and prints two objects of the class named


<emphasis id="strong1003" effect="bold">
TestClass

</emphasis>
. Neither object contains any data and neither class 
has 
access to any data.

</para>




	

<table id="table1001" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Image_2" effect="bold">

Listing 2

</emphasis>

. Instantiate and 
				display two objects.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">




<code id="pre1001" display="block">
print("Instantiate and display two objects of TestClass")
ref01 = TestClass()
print(ref01)
ref02 = TestClass()
print(ref02)
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1017">
<link id="a1065" target-id="Image_3">

Figure 1

</link>

 shows the output from the code in 

<link id="a1066" target-id="Image_2">


	Listing 2

</link>

. There is nothing new 
	here. You saw code like this in an earlier module.

</para>




	

<table id="table1002" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Image_3" effect="bold">

Figure 1

</emphasis>

. Output from the code 
				in Listing 2.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">




<code id="pre1002" display="block">
Instantiate and display two objects of TestClass
&lt;__main__.TestClass object at 0x02152930&gt;
&lt;__main__.TestClass object at 0x02152E70&gt;
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31004">
<title>
<emphasis id="Add_a_class_variable_directly" effect="bold">

Add a class variable directly

</emphasis>


</title>




<para id="p1018">
The code in 

<link id="a1067" target-id="Image_4">

Listing 3

</link>

 accesses the class named 

<emphasis id="strong1004" effect="bold">
TestClass

</emphasis>
 
directly by name and adds a class variable named 

<emphasis id="strong1005" effect="bold">
classVar01

</emphasis>
 to 
the class. 

</para>




	

<table id="table1003" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Image_4" effect="bold">

Listing 3

</emphasis>

. Add a class variable directly.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">




<code id="pre1003" display="block">
print("Add a class variable directly.")
TestClass.classVar01 = "ABCD"
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1019">
The interesting question is what impact if any does this have on the two 
	objects that have already been instantiated from the class? I will defer a 
	discussion of this question until after we see the impact.

</para>




</section>
<section id="h31005">
<title>
<emphasis id="Add_a_class_variable_via_an_object" effect="bold">

Add a class variable via an object

</emphasis>


</title>


	

<para id="p1020">
The code in 

<link id="a1068" target-id="Image_5">

Listing 4

</link>

 calls the method named 

<emphasis id="strong1006" effect="bold">
addClassVariable

</emphasis>
 
	that is defined in the class shown in 

<link id="a1069" target-id="Image_1">

Listing 1

</link>

 to add another class variable 
	named 

<emphasis id="strong1007" effect="bold">
classVar02

</emphasis>
 to the class named 

<emphasis id="strong1008" effect="bold">
TestClass

</emphasis>
.

</para>




	

<table id="table1004" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Image_5" effect="bold">

Listing 4

</emphasis>

. Add a class variable via an object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">




<code id="pre1004" display="block">
print("Add a class variable via an object.")
ref01.addClassVar("1234")
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1021">
The purpose of including this code in the program is simply to show that 
	an object can be used to modify the class from which it was instantiated.

</para>




</section>
<section id="h31006">
<title>
<emphasis id="Display_both_class_variables_via_one_object" effect="bold">

Display both class variables via one object

</emphasis>


</title>




<para id="p1022">
The code in 

<link id="a1070" target-id="Image_6">

Listing 5

</link>

 uses the reference to one of the objects, 

<emphasis id="strong1009" effect="bold">
ref01

</emphasis>
, 
to access and print the values of the two new class variables named 

<emphasis id="strong1010" effect="bold">

classVar01

</emphasis>
 and 

<emphasis id="strong1011" effect="bold">
classVar02

</emphasis>
. That brings us back to the 
question of what impact if any does the addition of two new class variables have 
on the two objects that have already been instantiated from the class?

</para>




	

<table id="table1005" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Image_6" effect="bold">

Listing 5

</emphasis>

. Display both class variables via one object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">




<code id="pre1005" display="block">
print("Display both class variables via one object")
print("ref01: " + ref01.classVar01)
print("ref01: " + ref01.classVar02)
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1023">
<emphasis id="Although_I_am_unable" effect="bold">

Although I am unable

</emphasis>

 to locate a 
	reference to verify this, it is my understanding that when program code 
	references an attribute such as 

<emphasis id="strong1012" effect="bold">
classVar01

</emphasis>
 using a reference to an object such as 

<emphasis id="strong1013" effect="bold">
ref01

</emphasis>
, 
	the runtime system first searches the object to see if it contains an 
	attribute with that name. If it doesn't find an attribute with that name in 
	the object, it then searches the class from which the object was 
	instantiated.

</para>




<para id="p1024">
The object referred to by 

<emphasis id="strong1014" effect="bold">
ref01

</emphasis>
 does not contain an 
attribute named 

<emphasis id="strong1015" effect="bold">
classVar01

</emphasis>
, but the class named 

<emphasis id="strong1016" effect="bold">

TestClass

</emphasis>
 does now contain an attribute with that name 

<emphasis id="em1011" effect="italics">
(even though 
it was not there when the object was instantiated)

</emphasis>
. 

</para>




<quote id="blockquote1000" display="block">
If both the object and the class contain attributes with the same 
name, the attribute in the object will shadow or hide the attribute in the class. I will 
demonstrate the impact of this later.

</quote>




<para id="p1025">
If the search pattern described 

<link id="a1071" target-id="Although_I_am_unable">

above

</link>

 is 
correct, we would expect the code in 

<link id="a1072" target-id="Image_6">

Listing 5

</link>

 to display the values contained in 
each of the two new class variables belonging to the class named 

<emphasis id="strong1017" effect="bold">

TestClass

</emphasis>
. 

<link id="a1073" target-id="Image_7">

Figure 2

</link>

 shows the output produced by the code in 

<link id="a1074" target-id="Image_6">


Listing 5

</link>

 and 
verifies that the search pattern described 

<link id="a1075" target-id="Although_I_am_unable">

above

</link>

 
is probably correct. The values stored in the new class variables are displayed 
in 

<link id="a1076" target-id="Image_7">

Figure 2

</link>

 by the code in 

<link id="a1077" target-id="Image_6">

Listing 5

</link>

.

</para>













	

<table id="table1006" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Image_7" effect="bold">

Figure 2

</emphasis>

. Output of the code 
				in Listing 5.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">




<code id="pre1006" display="block">
Display both class variables via one object
ref01: ABCD
ref01: 1234
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31007">
<title>
<emphasis id="Display_both_class_variables_via_the_other_object" effect="bold">

Display both class variables via the other object

</emphasis>


</title>




<para id="p1026">
The code in 

<link id="a1078" target-id="Image_8">

Listing 6

</link>

 along with the output shown in 

<link id="a1079" target-id="Image_25">


Figure 10

</link>

 shows 
unsurprisingly that the other object that was instantiated from 

<emphasis id="strong1018" effect="bold">

TestClass

</emphasis>
 can be used to access and display the same contents of the same 
two class variables.

</para>




	

<table id="table1007" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Image_8" effect="bold">

Listing 6

</emphasis>

. Display both class variables via the other object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">




<code id="pre1007" display="block">
print("Display both class variables via the other object")
print("ref02: " + ref02.classVar01)
print("ref02: " + ref02.classVar02)
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1027">
This is because class variables belonging to a class are shared among all 
	objects instantiated from that class unless shadowed by an instance variable 
	having the same name in an object of the class. This will be demonstrated in 
	the programs that follow.

</para>




</section>
</section>
<section id="h21004">
<title>
<emphasis id="Typical_class_variable_usage" effect="bold">

Typical class variable usage

</emphasis>


</title>




<para id="p1028">
<link id="a1080" target-id="Image_26">

Listing 16

</link>

 shows a program that probably comes closer to the intended use of 
class variables than the code in the earlier program shown in 

<link id="a1081" target-id="Image_24">


Listing 15

</link>

. The 
output from the code shown in 

<link id="a1082" target-id="Image_26">

Listing 16

</link>

 is shown in 

<link id="a1083" target-id="Image_27">


Figure 11

</link>

.

</para>




<para id="p1029">
This program demonstrates that class variables are shared among the objects
instantiated from a class. It also demonstrates that changes to class variables 
in that class impact all of the
objects instantiated from the class.

</para>




<section id="h31008">
<title>
<emphasis id="The_class_definition" effect="bold">

The class definition

</emphasis>


</title>




<para id="p1030">
<link id="a1084" target-id="Image_9">

Listing 7

</link>

 shows the definition of the class for this 
program including the creation and 
initialization a class variable named 

<emphasis id="strong1019" effect="bold">
classVar

</emphasis>
. The class 
definition also includes a couple of methods that I will discuss later.

</para>




	

<table id="table1008" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Image_9" effect="bold">

Listing 7

</emphasis>

. The class 
				definition.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">




<code id="pre1008" display="block">
class TestClass(object):
    classVar = [1,2,3,4]

    def modifyClassVar01(self):
        self.classVar.append("a")

    def printClassVar01(self):
        print(str(self)[10:40] + ": " + str(self.classVar))

print("1  Display class var using class: " + str(TestClass.classVar))
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1031">
<link id="a1085" target-id="Image_9">

Listing 7

</link>

 also contains a print statement that prints the value of the 
	variable named 

<emphasis id="strong1020" effect="bold">
classVar

</emphasis>
 by using the name of the class,
	

<emphasis id="strong1021" effect="bold">
TestClass

</emphasis>
, to access the variable. The output is shown in 
	

<link id="a1086" target-id="Image_10">

Figure 3

</link>

.

</para>




<para id="p1032">
The output shown in 

<link id="a1087" target-id="Image_10">

Figure 3

</link>

 faithfully reproduces the initial value of the 
class variable shown in the second line of text in 

<link id="a1088" target-id="Image_9">

Listing 7

</link>

.

</para>


	

<table id="table1009" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Image_10" effect="bold">

Figure 3

</emphasis>

. Output from the 
				code in Listing 7.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">




<code id="pre1009" display="block">
1 Display class var using class: [1, 2, 3, 4]
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31009">
<title>
<emphasis id="Instantiate_two_objects_from_the_class" effect="bold">

Instantiate two objects 
	from the class

</emphasis>


</title>




<para id="p1033">
<link id="a1089" target-id="Image_11">

Listing 8

</link>

 instantiates two separate and distinct objects from the class named


<emphasis id="strong1022" effect="bold">
TestClass

</emphasis>
. Those objects' references are stored in the 
variables named 

<emphasis id="strong1023" effect="bold">
ref01

</emphasis>
 and 

<emphasis id="strong1024" effect="bold">
ref02

</emphasis>
.

</para>




	

<table id="table1010" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Image_11" effect="bold">

Listing 8

</emphasis>

. Instantiate two 
				objects from the class.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">




<code id="pre1010" display="block">
print("2  Instantiate two objects")
ref01 = TestClass()
ref02 = TestClass()

print("3  Display class var using objects")
ref01.printClassVar01()
ref02.printClassVar01()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1034">
<link id="a1090" target-id="Image_11">

Listing 8

</link>

 also uses the variables named 

<emphasis id="strong1025" effect="bold">
ref01

</emphasis>
 and 

<emphasis id="strong1026" effect="bold">

	ref02

</emphasis>
 to call the 

<emphasis id="strong1027" effect="bold">
printClassVar01

</emphasis>
 
	method shown in 

<link id="a1091" target-id="Image_9">

Listing 7

</link>

 on each object. This method concatenates and prints 
	a portion of the object identifier 

<emphasis id="em1012" effect="italics">
(self)

</emphasis>
 with the contents of 
	

<emphasis id="strong1028" effect="bold">
classVar

</emphasis>
 

<emphasis id="em1013" effect="italics">

	(as seen by the object)

</emphasis>
.

</para>




<para id="p1035">
<link id="a1092" target-id="Image_12">

Figure 4

</link>

 shows the output produced by the code in 

<link id="a1093" target-id="Image_11">


Listing 8

</link>

. As you can tell 
from 

<link id="a1094" target-id="Image_12">

Figure 4

</link>

, each object sees 

<emphasis id="strong1029" effect="bold">
classVar

</emphasis>
 as containing the initial 
value from 


<link id="a1095" target-id="Image_9">

Listing 7

</link>

.

</para>













	

<table id="table1011" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Image_12" effect="bold">

Figure 4

</emphasis>

. Output from the 
				code in Listing 8.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">




<code id="pre1011" display="block">
2 Instantiate two objects
3 Display class var using objects
TestClass object at 0x02091DD0: [1, 2, 3, 4]
TestClass object at 0x0218C710: [1, 2, 3, 4]
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31010">
<title>
<emphasis id="Modify_class_variable_using_object" effect="bold">

Modify class variable using 
	object

</emphasis>


</title>




<para id="p1036">
The code in 

<link id="a1096" target-id="Image_13">

Listing 9

</link>

 uses the reference to a single object 

<emphasis id="em1014" effect="italics">
(

<emphasis id="strong1030" effect="bold">
ref01

</emphasis>
)

</emphasis>
 
to call the method named 

<emphasis id="strong1031" effect="bold">
modifyClassVar01

</emphasis>
 

<emphasis id="em1015" effect="italics">
(see 

<link id="a1097" target-id="Image_9">


Listing 7

</link>

)

</emphasis>
 on that object, 
which appends the string 

<emphasis id="strong1032" effect="bold">
"a"

</emphasis>
 onto the list referred to by the 
class variable named 

<emphasis id="strong1033" effect="bold">
classVar

</emphasis>
. 

<emphasis id="em1016" effect="italics">
(As an aside, note that the 
code in the method uses the word 

<emphasis id="strong1034" effect="bold">
self

</emphasis>
 to access the class 
variable.)

</emphasis>
</para>


	

<table id="table1012" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Image_13" effect="bold">

Listing 9

</emphasis>

. Modify class 
				variable using object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">




<code id="pre1012" display="block">
print("4  Modify class var using object")
ref01.modifyClassVar01()

print("5  Display class var using objects")
ref01.printClassVar01()
ref02.printClassVar01()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1037">
After causing the string 

<emphasis id="strong1035" effect="bold">
"a"

</emphasis>
 to be appended to the list, 
	

<link id="a1098" target-id="Image_13">

Listing 9

</link>

 uses the variables named 

<emphasis id="strong1036" effect="bold">
ref01

</emphasis>
 and 

<emphasis id="strong1037" effect="bold">
ref02

</emphasis>
 to call the 
	

<emphasis id="strong1038" effect="bold">
printClassVar01

</emphasis>
 method on each object. This causes each object to print the 
	list as it sees it. The results are shown in 

<link id="a1099" target-id="Image_14">

Figure 5

</link>

.

</para>


	

<table id="table1013" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1013">

			

<row id="tr1026">

				

<entry id="th1013">
<emphasis id="Image_14" effect="bold">

Figure 5

</emphasis>

. Output from the 
				code in Listing 9.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1013">

			

<row id="tr1027">

				

<entry id="td1013">




<code id="pre1013" display="block">
4 Modify class var using object
5 Display class var using objects
TestClass object at 0x02091DD0: [1, 2, 3, 4, 'a']
TestClass object at 0x0218C710: [1, 2, 3, 4, 'a']
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1038">
Even though the contents of the list were modified only by code executed 
	in 

<emphasis id="strong1039" effect="bold">
ref01

</emphasis>
, the results are seen by both objects. This is 
	because the class variable is shared among all objects instantiated from the 
	class.

</para>




</section>
<section id="h31011">
<title>
<emphasis id="Modify_the_class_variable_using_the_class_name" effect="bold">

Modify the class 
variable using the class name

</emphasis>


</title>




<para id="p1039">
I could have stopped at that point and stated 

<emphasis id="em1017" effect="italics">
"case closed"

</emphasis>
. However, I decided 
to add a few more lines of code to illustrate that it doesn't matter how a class 
variable is modified, it still impacts all objects instantiated from the 
class because the class variable is shared among all objects instantiated from 
the class.

</para>




<para id="p1040">
The code in 

<link id="a1100" target-id="Image_15">

Listing 10

</link>

 uses the name of the class to access and modify the list 
referred to by the class variable named 

<emphasis id="strong1040" effect="bold">
classVar

</emphasis>
 in the class 
named 

<emphasis id="strong1041" effect="bold">
TestClass

</emphasis>
. The boolean value 

<emphasis id="strong1042" effect="bold">
True

</emphasis>
 is 
appended to the list by the code in 

<link id="a1101" target-id="Image_15">

Listing 10

</link>

.

</para>


	

<table id="table1014" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1014">

			

<row id="tr1028">

				

<entry id="th1014">
<emphasis id="Image_15" effect="bold">

Listing 10

</emphasis>

. Modify the class 
				variable using the class name.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1014">

			

<row id="tr1029">

				

<entry id="td1014">




<code id="pre1014" display="block">
print("6  Modify class var using class")
TestClass.classVar.append(True)

print("7  Display class var using objects")
ref01.printClassVar01()
ref02.printClassVar01()

print("8  Display class var using class: " + str(TestClass.classVar))
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1041">
After that, the code in 

<link id="a1102" target-id="Image_15">

Listing 10

</link>

 causes each object to print the list as 
	it see it. To seal the deal, the code in 

<link id="a1103" target-id="Image_15">

Listing 10

</link>

 uses the name of the class 
	to access and print the value stored in the class variable. The result is 
	shown in 

<link id="a1104" target-id="Image_16">

Figure 6

</link>

.

</para>




	

<table id="table1015" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1015">

			

<row id="tr1030">

				

<entry id="th1015">
<emphasis id="Image_16" effect="bold">

Figure 6

</emphasis>

. Output from the 
				code in Listing 10.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1015">

			

<row id="tr1031">

				

<entry id="td1015">




<code id="pre1015" display="block">
6 Modify class var using class
7 Display class var using objects
TestClass object at 0x02091DD0: [1, 2, 3, 4, 'a', True]
TestClass object at 0x0218C710: [1, 2, 3, 4, 'a', True]
8 Display class var using class: [1, 2, 3, 4, 'a', True]

</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1042">
Both objects see the change that was made to the list even though that 
	change was made independently of either object.

</para>




</section>
<section id="h31012">
<title>
<emphasis id="A_word_of_caution_is_in_order" effect="bold">

A word of caution is in order

</emphasis>


</title>




<para id="p1043">
This sort of behavior can lead to programming errors that are very easy 
to make and very difficult to find and fix. In my opinion, you should use 
mutable class variables very rarely if at all. On the other hand, class 
variables that are not mutable, such as tuples, can be very useful and are much 
safer to use. Even in that case, however, one immutable object can be replaced 
by a different immutable object so even the use of immutable objects is not 
totally safe.

</para>




</section>
</section>
<section id="h21005">
<title>
<emphasis id="Shadowing_or_hiding_a_class_variable" effect="bold">

Shadowing or hiding a class 
variable

</emphasis>


</title>




<para id="p1044">
If an instance variable belonging to an object has the same name as a class 
variable in the class from which the object was instantiated, the instance 
variable will "shadow" or hide the class variable insofar as that object is 
concerned. This is illustrated by the program shown in 

<link id="a1105" target-id="Image_28">


Listing 17

</link>

. The output from 
the program is shown in 

<link id="a1106" target-id="Image_29">

Figure 12

</link>

.

</para>




<section id="h31013">
<title>
<emphasis id="Class_definition_with_a_shadowing_method" effect="bold">

Class definition with a 
shadowing method

</emphasis>


</title>




<para id="p1045">
The class definition in 

<link id="a1107" target-id="Image_17">

Listing 11

</link>

 contains a class variable named 

<emphasis id="strong1043" effect="bold">

classVar

</emphasis>
. The class definition also contains a method named 

<emphasis id="strong1044" effect="bold">

shadowClassVariable

</emphasis>
. If that method is executed on an object 
instantiated from the class, it will add a new instance variable to the object 
named 

<emphasis id="strong1045" effect="bold">
classVar

</emphasis>
. From that point forward, the class variable 
named 

<emphasis id="strong1046" effect="bold">
classVar

</emphasis>
 won't be visible insofar as that object is 
concerned unless it accesses the class variable using the name of the class,


<emphasis id="strong1047" effect="bold">
TestClass

</emphasis>
.

</para>











	


	

<table id="table1016" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1016">

			

<row id="tr1032">

				

<entry id="th1016">
<emphasis id="Image_17" effect="bold">

Listing 11

</emphasis>

. Class definition 
				with a shadowing method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1016">

			

<row id="tr1033">

				

<entry id="td1016">




<code id="pre1016" display="block">
class TestClass(object):
    classVar = 1234

    #Note, the following code adds a new instance variable named classVar
    # to the object, which "shadows" or hides the actual class variable
    # named classVar insofar as this object is concerned.
    def shadowClassVariable(self):
        self.classVar = "ABCD"

    def printClassVar(self):
        print(str(self)[10:40] + ": " + str(self.classVar))
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1046">
<link id="a1108" target-id="Image_17">

Listing 11

</link>

 also defines a method named 

<emphasis id="strong1048" effect="bold">
printClassVar

</emphasis>
. This 
	method concatenates and prints a portion of the object identifier 

<emphasis id="em1018" effect="italics">
(self)

</emphasis>
 
	with the contents of 

<emphasis id="strong1049" effect="bold">
classVar

</emphasis>
 

<emphasis id="em1019" effect="italics">
(as seen by the object)

</emphasis>
.

</para>




</section>
<section id="h31014">
<title>
<emphasis id="Instantiate_and_display_classVar_in_two_objects" effect="bold">

Instantiate and 
display classVar in two objects

</emphasis>


</title>




<para id="p1047">
The code in 

<link id="a1109" target-id="Image_18">

Listing 12

</link>

 instantiates two different objects from the class named


<emphasis id="strong1050" effect="bold">
TestClass

</emphasis>
 and saves the objects' references in the variables 
named 

<emphasis id="strong1051" effect="bold">
ref01

</emphasis>
 and 

<emphasis id="strong1052" effect="bold">
ref02

</emphasis>
.

</para>


	


	

<table id="table1017" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1017">

			

<row id="tr1034">

				

<entry id="th1017">
<emphasis id="Image_18" effect="bold">

Listing 12

</emphasis>

. Instantiate and 
				display classVar in two objects.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1017">

			

<row id="tr1035">

				

<entry id="td1017">




<code id="pre1017" display="block">
print("1  Instantiate two objects")
ref01 = TestClass()
ref02 = TestClass()

print("2  Display classVar using objects")
ref01.printClassVar()
ref02.printClassVar()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1048">
The code in 

<link id="a1110" target-id="Image_18">

Listing 12

</link>

 also uses those references to call the method named
	

<emphasis id="strong1053" effect="bold">
printClassVar

</emphasis>
 on each object. This causes the contents of
	

<emphasis id="strong1054" effect="bold">
classVar

</emphasis>
 to be printed as seen by each object at this point 
	in the program. The results are shown in 

<link id="a1111" target-id="Image_19">

Figure 7

</link>

.

</para>




<para id="p1049">
As you have probably already figured out, each object gets and prints the 
contents of the class variable named 

<emphasis id="strong1055" effect="bold">
classVar

</emphasis>
 causing matching output values to 
be seen in 

<link id="a1112" target-id="Image_19">

Figure 7

</link>

.

</para>


	


	

<table id="table1018" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1018">

			

<row id="tr1036">

				

<entry id="th1018">
<emphasis id="Image_19" effect="bold">

Figure 7

</emphasis>

. Output from the 
				coded in Listing 12.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1018">

			

<row id="tr1037">

				

<entry id="td1018">




<code id="pre1018" display="block">
1 Instantiate two objects
2 Display classVar using objects
TestClass object at 0x02201DD0: 1234
TestClass object at 0x022FC710: 1234
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31015">
<title>
<emphasis id="Modify_classVar_in_one_object" effect="bold">

Modify classVar in one object

</emphasis>


</title>




<para id="p1050">
The code in 

<link id="a1113" target-id="Image_20">

Listing 13

</link>

 calls the 

<emphasis id="strong1056" effect="bold">
shadowClassVariable

</emphasis>
 method on 
the object referred to by the variable named 

<emphasis id="strong1057" effect="bold">
ref01

</emphasis>
. As I 
described 

<link id="a1114" target-id="Class_definition_with_a_shadowing_method">

earlier

</link>

, this 
call will add a new instance variable named 

<emphasis id="strong1058" effect="bold">
classVar

</emphasis>
 to the 
object. 
From that point forward, the class variable named 

<emphasis id="strong1059" effect="bold">
classVar

</emphasis>
 
won't be visible insofar as that object is concerned unless it accesses the 
class variable using the name of the class, 

<emphasis id="strong1060" effect="bold">
TestClass

</emphasis>
.

</para>


	

<table id="table1019" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1019">

			

<row id="tr1038">

				

<entry id="th1019">
<emphasis id="Image_20" effect="bold">

Listing 13

</emphasis>

. Modify classVar 
				in one object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1019">

			

<row id="tr1039">

				

<entry id="td1019">




<code id="pre1019" display="block">
print("3  Shadow the classVar in one object")
ref01.shadowClassVariable()

print("4  Display classVar using objects")
ref01.printClassVar()
ref02.printClassVar()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1051">
Once again, The code in 

<link id="a1115" target-id="Image_20">

Listing 13

</link>

 also uses the objects' references to call the method named
	

<emphasis id="strong1061" effect="bold">
printClassVar

</emphasis>
 on each object. This causes the contents of
	

<emphasis id="strong1062" effect="bold">
classVar

</emphasis>
 to be printed as seen by each object at this point 
	in the program. The results are shown in 

<link id="a1116" target-id="Image_21">

Figure 8

</link>

.

</para>


	


	

<table id="table1020" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1020">

			

<row id="tr1040">

				

<entry id="th1020">
<emphasis id="Image_21" effect="bold">

Figure 8

</emphasis>

. Output from the 
				code in Listing 13.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1020">

			

<row id="tr1041">

				

<entry id="td1020">




<code id="pre1020" display="block">
3 Shadow the classVar in one object
4 Display classVar using objects
TestClass object at 0x02201DD0: ABCD
TestClass object at 0x022FC710: 1234
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1052">
The two output values in 

<link id="a1117" target-id="Image_21">

Figure 8

</link>

 no longer match. This is because the 
	object referred to by 

<emphasis id="strong1063" effect="bold">
ref01

</emphasis>
 no longer sees the class 
	variable named 

<emphasis id="strong1064" effect="bold">
classVar

</emphasis>
. Instead, it sees the new instance 
	variable named 

<emphasis id="strong1065" effect="bold">
classVar

</emphasis>
, which contains a different value.

</para>




</section>
<section id="h31016">
<title>
<emphasis id="Modify_the_contents_of_the_class_variable" effect="bold">

Modify the contents of 
the class variable

</emphasis>


</title>




<para id="p1053">
The code in 

<link id="a1118" target-id="Image_22">

Listing 14

</link>

 uses the name of the class, 

<emphasis id="strong1066" effect="bold">
TestClass

</emphasis>
, to change the 
value stored in its class variable named 

<emphasis id="strong1067" effect="bold">
classVar

</emphasis>
. Then the objects' reference 
are used to once again print the contents of 

<emphasis id="strong1068" effect="bold">
classVar

</emphasis>
 as seen by each object.

</para>



	

	

<table id="table1021" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1021">

			

<row id="tr1042">

				

<entry id="th1021">
<emphasis id="Image_22" effect="bold">

Listing 14

</emphasis>

. Modify the 
				contents of the class variable.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1021">

			

<row id="tr1043">

				

<entry id="td1021">




<code id="pre1021" display="block">
print("5  Modify classVar using class")
TestClass.classVar = True

print("6  Display classVar using objects")
ref01.printClassVar()
ref02.printClassVar()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1054">
The results are shown in 

<link id="a1119" target-id="Image_23">

Figure 9

</link>

. The change in the value of the class 
	variable is reflected in the output produced by the object referred to by 
	

<emphasis id="strong1069" effect="bold">
ref02

</emphasis>
. However, the object referred to by 

<emphasis id="strong1070" effect="bold">
ref01

</emphasis>
 is 
	blind to that change because the class variable is shadowed or hidden by an 
	instance variable having the same name in that object.

</para>











	

	

	

<table id="table1022" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1022">

			

<row id="tr1044">

				

<entry id="th1022">
<emphasis id="Image_23" effect="bold">

Figure 9

</emphasis>

. Output from the 
				code in Listing 14.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1022">

			

<row id="tr1045">

				

<entry id="td1022">




<code id="pre1022" display="block">
6 Display classVar using objects
TestClass object at 0x02201DD0: ABCD
TestClass object at 0x022FC710: True
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>







</section>
</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the programs

</emphasis>


</title>





<para id="p1055">
I encourage you to copy the code from 

<link id="a1120" target-id="Image_24">

Listing 15

</link>

,


<link id="a1121" target-id="Image_26">

Listing 16

</link>

, 
and 

<link id="a1122" target-id="Image_28">

Listing 17

</link>

. Execute the code and confirm that you get the 
same results as those shown. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




</section>
<section id="h11005">
<title>
<emphasis id="Visualize_the_programs" effect="bold">

Visualize the programs

</emphasis>


</title>




<para id="p1056">
I also encourage you to create


<link id="a1123" url="http://pythontutor.com/visualize.html#mode=display">


visualizations

</link>

 for the code in


<link id="a1124" target-id="Image_24">

Listing 15

</link>

,


<link id="a1125" target-id="Image_26">

Listing 16

</link>

, 
and 

<link id="a1126" target-id="Image_28">

Listing 17

</link>

. Step through the programs one 
instruction at a time. As you do that, pay attention to the movements of the red 
and green arrows on the left, the diagram on the right, and the printed material 
at the bottom. That should help you to better understand the use of class 
variables in Python.

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listings

</emphasis>


</title>




<para id="p1057">
Complete listings of the programs discussed in this module, along with the 
outputs produced by those programs are provided below.

</para>


	

<table id="table1023" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1023">

			

<row id="tr1046">

				

<entry id="th1023">
<emphasis id="Image_24" effect="bold">

Listing 15

</emphasis>

. Complete 
				program listing.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1023">

			

<row id="tr1047">

				

<entry id="td1023">




<code id="pre1023" display="block">
# This program demonstrates the modification of a class after it has been
# used to instantiate objects.
#------------------------------------------------------------------------
class TestClass(object):
    def addClassVar(self,data):
        TestClass.classVar02 = data

print("Instantiate and display two objects of TestClass")
ref01 = TestClass()
print(ref01)
ref02 = TestClass()
print(ref02)

print("Add a class variable directly.")
TestClass.classVar01 = "ABCD"

print("Add a class variable via an object.")
ref01.addClassVar("1234")

print("Display both class variables via one object")
print("ref01: " + ref01.classVar01)
print("ref01: " + ref01.classVar02)

print("Display both class variables via the other object")
print("ref02: " + ref02.classVar01)
print("ref02: " + ref02.classVar02)
</code>





				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	

	

<table id="table1024" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1024">

			

<row id="tr1048">

				

<entry id="th1024">
<emphasis id="Image_25" effect="bold">

Figure 10

</emphasis>

. Output from 
				the code in Listing 15.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1024">

			

<row id="tr1049">

				

<entry id="td1024">




<code id="pre1024" display="block">
Instantiate and display two objects of TestClass
&lt;__main__.TestClass object at 0x02152930&gt;
&lt;__main__.TestClass object at 0x02152E70&gt;
Add a class variable directly.
Add a class variable via an object.
Display both class variables via one object
ref01: ABCD
ref01: 1234
Display both class variables via the other object
ref02: ABCD
ref02: 1234
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	

	

<table id="table1025" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1025">

			

<row id="tr1050">

				

<entry id="th1025">
<emphasis id="Image_26" effect="bold">

Listing 16

</emphasis>

. Complete 
				program listing. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1025">

			

<row id="tr1051">

				

<entry id="td1025">




<code id="pre1025" display="block">
# This program demonstrates that class variables are shared among the objects
# instantiated from a class and that changes to class variables impact the
# objects instantiated from the class.
#----------------------------------------------------------------------------
class TestClass(object):
    classVar = [1,2,3,4]

    def modifyClassVar01(self):
        self.classVar.append("a")

    def printClassVar01(self):
        print(str(self)[10:40] + ": " + str(self.classVar))

print("1  Display class var using class: " + str(TestClass.classVar))
      
print("2  Instantiate two objects")
ref01 = TestClass()
ref02 = TestClass()

print("3  Display class var using objects")
ref01.printClassVar01()
ref02.printClassVar01()

print("4  Modify class var using object")
ref01.modifyClassVar01()

print("5  Display class var using objects")
ref01.printClassVar01()
ref02.printClassVar01()

print("6  Modify class var using class")
TestClass.classVar.append(True)

print("7  Display class var using objects")
ref01.printClassVar01()
ref02.printClassVar01()

print("8  Display class var using class: " + str(TestClass.classVar))
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	

	

<table id="table1026" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1026">

			

<row id="tr1052">

				

<entry id="th1026">
<emphasis id="Image_27" effect="bold">

Figure 11

</emphasis>

. Output from 
				the code in Listing 16.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1026">

			

<row id="tr1053">

				

<entry id="td1026">




<code id="pre1026" display="block">
1 Display class var using class: [1, 2, 3, 4]
2 Instantiate two objects
3 Display class var using objects
TestClass object at 0x02091DD0: [1, 2, 3, 4]
TestClass object at 0x0218C710: [1, 2, 3, 4]
4 Modify class var using object
5 Display class var using objects
TestClass object at 0x02091DD0: [1, 2, 3, 4, 'a']
TestClass object at 0x0218C710: [1, 2, 3, 4, 'a']
6 Modify class var using class
7 Display class var using objects
TestClass object at 0x02091DD0: [1, 2, 3, 4, 'a', True]
TestClass object at 0x0218C710: [1, 2, 3, 4, 'a', True]
8 Display class var using class: [1, 2, 3, 4, 'a', True]
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	
	

<table id="table1027" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1027">

			

<row id="tr1054">

				

<entry id="th1027">
<emphasis id="Image_28" effect="bold">

Listing 17

</emphasis>

. Complete 
				program listing. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1027">

			

<row id="tr1055">

				

<entry id="td1027">




<code id="pre1027" display="block">
# This program illustrates that an instance variable will shadow or hide a
# class variable with the same name.
#---------------------------------------------------------------------------
class TestClass(object):
    classVar = 1234

    #Note, the following code adds a new instance variable named classVar
    # to the object, which "shadows" or hides the actual class variable
    # named classVar insofar as this object is concerned.
    def shadowClassVariable(self):
        self.classVar = "ABCD"

    def printClassVar(self):
        print(str(self)[10:40] + ": " + str(self.classVar))

print("1  Instantiate two objects")
ref01 = TestClass()
ref02 = TestClass()

print("2  Display classVar using objects")
ref01.printClassVar()
ref02.printClassVar()

print("3  Shadow the classVar in one object")
ref01.shadowClassVariable()

print("4  Display classVar using objects")
ref01.printClassVar()
ref02.printClassVar()

print("5  Modify classVar using class")
TestClass.classVar = True

print("6  Display classVar using objects")
ref01.printClassVar()
ref02.printClassVar()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	

	

<table id="table1028" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1028">

			

<row id="tr1056">

				

<entry id="th1028">
<emphasis id="Image_29" effect="bold">

Figure 12

</emphasis>

. Output from 
				the code in Listing 17.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1028">

			

<row id="tr1057">

				

<entry id="td1028">




<code id="pre1028" display="block">
1 Instantiate two objects
2 Display classVar using objects
TestClass object at 0x02201DD0: 1234
TestClass object at 0x022FC710: 1234
3 Shadow the classVar in one object
4 Display classVar using objects
TestClass object at 0x02201DD0: ABCD
TestClass object at 0x022FC710: 1234
5 Modify classVar using class
6 Display classVar using objects
TestClass object at 0x02201DD0: ABCD
TestClass object at 0x022FC710: True
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1058">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1071" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1010" list-type="bulleted">

					

<item id="li1062">
Module name: Itse1359-1440-Class Variables

</item>


					

<item id="li1063">
File: Itse1359-1440.htm


</item>


					

<item id="li1064">
Published: 10/27/14

</item>




<item id="li1065">
Revised: 03/04/15

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1072" effect="bold">
Disclaimers:

</emphasis>
<para id="p1059">
<emphasis id="strong1073" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1060">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1061">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1062">
<emphasis id="strong1074" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	






<para id="p1063">
-end-

</para>






</section>
</content>




</document>