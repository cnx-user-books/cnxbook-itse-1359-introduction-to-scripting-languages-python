<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Itse1359-1210-The while Loop</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m51396</md:content-id>
  <md:title>Itse1359-1210-The while Loop</md:title>
  <md:abstract>This module introduces control flow in general and explains the use of the while loop in Python.</md:abstract>
  <md:uuid>efa4d804-2068-4356-96c3-93eda155cbad</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="What_you_have_learned">

What you have learned

</link>


</item>


		

<item id="li1002">
<link id="a1002" target-id="What_you_will_learn">

What you will learn

</link>


</item>


		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>



		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1006">
<link id="a1006" target-id="General_background_information">

General background information

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1007">
<link id="a1007" target-id="Repetition">

Repetition

</link>


</item>


		

<item id="li1008">
<link id="a1008" target-id="Modularity">

Modularity

</link>


</item>


		

<item id="li1009">
<link id="a1009" target-id="Decision_logic">

Decision logic

</link>


</item>


	

</list>


	

</item>


	

<item id="li1010">
<link id="a1010" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1004" list-type="bulleted">

		

<item id="li1011">
<link id="a1011" target-id="The_while_loop">

The while loop

</link>


</item>


		

<item id="li1012">
<link id="a1012" target-id="Visualization_of_the_program">

Visualization of the program

</link>


</item>


		

<item id="li1013">
<link id="a1013" target-id="Create_populate_and_display_a_list">

Create, populate, and display a list

</link>


</item>


		

<item id="li1014">
<link id="a1014" target-id="Create_and_initialize_a_counter_variable">

Create and initialize a counter variable

</link>


</item>


		

<item id="li1015">
<link id="a1015" target-id="Execute_a_while_loop">

Execute a while loop

</link>


</item>


		

<item id="li1016">
<link id="a1016" target-id="Append_values_to_the_end_of_the_list">

Append values to the end of the list

</link>


</item>


		

<item id="li1017">
<link id="a1017" target-id="Increment_the_count_variable">

Increment the counter 
		variable

</link>


</item>


		

<item id="li1018">
<link id="a1018" target-id="Print_the_current_state_of_the_list">

Print the current state of the list

</link>


</item>


	

</list>


	

</item>



	

<item id="li1019">
<link id="a1019" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1020">
<link id="a1020" target-id="Miscellaneous">

Miscellaneous

</link>


</item>





</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules on Python designed for 
teaching 

<emphasis id="em1000" effect="italics">
ITSE 1359 Introduction to Scripting Languages: Python

</emphasis>
 at Austin Community 
College in Austin, TX. 

</para>




<section id="h21000">
<title>
<emphasis id="What_you_have_learned" effect="bold">

What you have learned

</emphasis>


</title>




<para id="p1001">
Earlier modules in this collection have included instruction on the following 
topics:

</para>




<list id="ul1005" list-type="bulleted">

	

<item id="li1021">
numbers

</item>


	

<item id="li1022">
variables

</item>


	

<item id="li1023">
identifiers

</item>


	

<item id="li1024">
strings

</item>


	

<item id="li1025">
scripts

</item>


	

<item id="li1026">
lists

</item>


	

<item id="li1027">
tuples

</item>




</list>




<para id="p1002">
This has prepared you to use Python as a very fancy desk calculator.

</para>




</section>
<section id="h21001">
<title>
<emphasis id="What_you_will_learn" effect="bold">

What you will learn

</emphasis>


</title>




<para id="p1003">
The next step in learning to program with Python is to learn how to apply 
repetition, modularity, and decision logic to your scripts. This is often 
referred to in computer jargon as 

<emphasis id="em1001" effect="italics">
control flow

</emphasis>
.

</para>




<para id="p1004">
This module introduces 

<emphasis id="em1002" effect="italics">
control flow

</emphasis>
 in general and explains the use of the


<emphasis id="strong1000" effect="bold">
while

</emphasis>
 loop in Python as an example of 

<emphasis id="em1003" effect="italics">
control flow

</emphasis>
.

</para>


	

</section>
<section id="h21002">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1005">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
	and the Listings 
while you are reading about them.

</para>




<para id="p1006">
<emphasis id="em1004" effect="italics">
(Note to blind and visually impaired students: Most of the Figures and all of the 
Listings in 
this module are presented in plain text format and should be accessible using an 
audio screen reader or a braille display. Note however that the required 
indentation may not be properly represented by an audio screen reader.)

</emphasis>
</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">


		

<item id="li1028">
<link id="a1021" target-id="Image_2">

Figure 1

</link>

. Output from the script in Listing 1.

</item>



		

<item id="li1029">
<link id="a1022" target-id="Figure_2">

Figure 2

</link>

. Output from the script in Listing 2.

</item>


		

<item id="li1030">
<link id="a1023" target-id="Figure_3">

Figure 3

</link>

. Visualization of the program.

</item>


	

</list>




</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1007" list-type="bulleted">



<item id="li1031">
<link id="a1024" target-id="Image_1">

Listing 1

</link>

. Typical script from earlier modules. 

</item>


		

<item id="li1032">
<link id="a1025" target-id="Image_3">

Listing 2

</link>

. Use a while loop to manipulate a list.

</item>





</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1007">
A typical script in the earlier modules looked something like the one shown 
in 

<link id="a1026" target-id="Image_1">

Listing 1

</link>

.

</para>


	

<table id="table1000" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Image_1" effect="bold">

Listing 1

</emphasis>

. Typical script from 
				earlier modules.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
# Illustrates extracting a
# list element and extracting
# elements from a nested list
#
#-------------------------------
print("Create and print a list")
listA = [100,200,300,400,500]
print(listA)
print("Original length is:")
print(len(listA))
print("Replace an element")
listA[2] = [2,4,8,16,32,64]
print("Print the modified list")
print(listA)
print("Modified length is:")
print(len(listA))
print("Extract and display each")
print(" element in the list")
print(listA[0])
print(listA[1])
print(listA[2])
print(listA[3])
print(listA[4])

print("Extract and display each")
print(" element in nested list")
print(listA[2][0])
print(listA[2][1])
print(listA[2][2])
print(listA[2][3])
print(listA[2][4])
print(listA[2][5])
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1008">
The output produced by the script in 

<link id="a1027" target-id="Image_1">

Listing 1

</link>

 is shown in 

<link id="a1028" target-id="Image_2">

Figure 1

</link>

.

</para>


	

<table id="table1001" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Image_2" effect="bold">

Figure 1

</emphasis>

. Output from the 
				script in Listing 1.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">
Create and print a list
[100, 200, 300, 400, 500]
Original length is:
5
Replace an element
Print the modified list
[100, 200, [2, 4, 8, 16, 32, 64], 400, 500]
Modified length is:
5
Extract and display each
element in the list
100
200
[2, 4, 8, 16, 32, 64]
400
500
Extract and display each
element in nested list
2
4
8
16
32
64
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1009">
While the code in 

<link id="a1029" target-id="Image_1">

Listing 1

</link>

 does some interesting and useful things, it is 
	missing one major component of modern computer programming -- 

<emphasis id="strong1001" effect="bold">
<emphasis id="em1005" effect="italics">

	control flow

</emphasis>
</emphasis>
.

</para>




<para id="p1010">
Control flow is generally considered to include the following 
features plus some others that I will get into in future modules:

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1033">
repetition

</item>


	

<item id="li1034">
modularity

</item>


	

<item id="li1035">
decision logic

</item>




</list>




<section id="h21003">
<title>
<emphasis id="Repetition" effect="bold">

Repetition

</emphasis>


</title>




<para id="p1011">
Repetition is the ability to cause specified portions of the code to be 
executed repeatedly under tightly controlled conditions. Repetition almost 
always embeds decision logic in some form. This module will introduce you to one 
of the mechanisms for implementing repetition in Python -- the 

<emphasis id="strong1002" effect="bold">
while

</emphasis>
 loop. Other 
mechanisms will be discussed in future modules.

</para>




</section>
<section id="h21004">
<title>
<emphasis id="Modularity" effect="bold">

Modularity

</emphasis>


</title>




<para id="p1012">
Modularity is the ability to subdivide the code into separate reusable units 
often called 

<emphasis id="em1006" effect="italics">
functions

</emphasis>
 and 

<emphasis id="em1007" effect="italics">
methods

</emphasis>
. The design of functions 
and methods will be discussed in future modules.

</para>




</section>
<section id="h21005">
<title>
<emphasis id="Decision_logic" effect="bold">

Decision logic

</emphasis>


</title>




<para id="p1013">
Decision logic is the ability to make decisions on the basis of the program 
state and to determine which code will be executed as well as when and how it 
will be executed. As mentioned above, repetition almost always embeds decision 
logic in some form. In addition, Python supports a stand-alone decision 
capability -- the 

<emphasis id="strong1003" effect="bold">
if

</emphasis>
 statement, which will be discussed in a 
future module.

</para>


	
	

</section>
</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<section id="h21006">
<title>
<emphasis id="The_while_loop" effect="bold">

The while loop

</emphasis>


</title>




<para id="p1014">
The 

<emphasis id="strong1004" effect="bold">
while

</emphasis>
 loop is the most fundamental and the most general 
of all the repetition mechanisms in most programming languages. Most programming 
languages provide other more specialized looping mechanisms for convenience, and 
Python is no exception to that rule. However, the fundamental behavior of most 
and perhaps all of those more specialized looping mechanisms can be replicated 
with a properly-configured 

<emphasis id="strong1005" effect="bold">
while

</emphasis>
 loop.

</para>




<para id="p1015">
The code in 

<link id="a1030" target-id="Image_3">

Listing 2

</link>

 illustrates the use of a


<emphasis id="strong1006" effect="bold">
while

</emphasis>
<emphasis id="em1008" effect="italics">
 

</emphasis>
loop. 
	It also illustrates one of the features of 

<emphasis id="strong1007" effect="bold">
lists

</emphasis>
 -- the 

<emphasis id="strong1008" effect="bold">
append

</emphasis>
 method. Finally, it 
	illustrates a decision structure that is embedded in the 

<emphasis id="strong1009" effect="bold">
while

</emphasis>
 
loop.

</para>




	

<table id="table1002" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Image_3" effect="bold">

Listing 2

</emphasis>

. Use a while loop to manipulate a list.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">
# Illustrates the use of a while loop to manipulate a list

aList = ["a","b","c"]
print(aList)

count = 0
while count &lt;= 5:
  print(count)
  aList.append(count)
  count = count + 1
#  count += 1

print(aList)
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1016">
The output produced by this program is shown in 

<link id="a1031" target-id="Figure_2">

Figure 2

</link>

.

</para>




	

<table id="table1003" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

. Output from the 
				script in Listing 2.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">
['a', 'b', 'c']
0
1
2
3
4
5
['a', 'b', 'c', 0, 1, 2, 3, 4, 5]
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




</section>
<section id="h21007">
<title>
<emphasis id="Visualization_of_the_program" effect="bold">

Visualization of the program

</emphasis>


</title>




<para id="p1017">
<link id="a1032" target-id="Figure_3">

Figure 3

</link>

 shows shows a


<link id="a1033" url="http://pythontutor.com/visualize.html#mode=display">

visualization

</link>

 
of the program after stepping through several iterations of the 

<emphasis id="strong1010" effect="bold">
while

</emphasis>
 
loop. This static image doesn't do justice to the visualization. You really need 
to run it yourself and step through the program to appreciate it.

</para>





<para id="p1018">
<emphasis id="strong1011" effect="bold">
<emphasis id="Figure_3" effect="bold">

Figure 3.

</emphasis>

 Visualization of the program.


</emphasis>
</para>




<para id="p1019">
<media id="media1000" alt="Visualization of the program" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/1359-1210a.jpg" width="751" height="533"/>
</media>


</para>



	

</section>
<section id="h21008">
<title>
<emphasis id="Create_populate_and_display_a_list" effect="bold">

Create, populate, and 
	display a list

</emphasis>


</title>




<para id="p1020">
The code in 

<link id="a1034" target-id="Image_3">

Listing 2

</link>

 begins by creating a list named 

<emphasis id="strong1012" effect="bold">
aList

</emphasis>
. 
The list is initially populated with the strings "a", "b", and "c". Then that 
list is printed producing the first line of output text shown in 

<link id="a1035" target-id="Figure_2">

Figure 2

</link>

.

</para>




</section>
<section id="h21009">
<title>
<emphasis id="Create_and_initialize_a_counter_variable" effect="bold">

Create and initialize a 
counter variable

</emphasis>


</title>




<para id="p1021">
Following that, a variable named 

<emphasis id="strong1013" effect="bold">
count

</emphasis>
 is created and 
initialized with the value 0. This variable will be used to control the number 
of iterations in the 

<emphasis id="strong1014" effect="bold">
while

</emphasis>
 loop.

</para>





</section>
<section id="h21010">
<title>
<emphasis id="Execute_a_while_loop" effect="bold">

Execute a while loop

</emphasis>


</title>




<para id="p1022">
The next four lines of code in 

<link id="a1036" target-id="Image_3">

Listing 2

</link>

 constitute a 

<emphasis id="strong1015" effect="bold">
while

</emphasis>
 
loop. The first line in the 

<emphasis id="strong1016" effect="bold">
while

</emphasis>
 loop contains a decision structure terminated 
by a colon.

</para>




<para id="p1023">
Recall that the initial value of 

<emphasis id="strong1017" effect="bold">
count

</emphasis>
 is 0. The behavior of 
the first line in the 

<emphasis id="strong1018" effect="bold">
while

</emphasis>
 loop can be paraphrased as follows:

</para>




<quote id="blockquote1000" display="block">

	

<para id="p1024">
While the value of 

<emphasis id="strong1019" effect="bold">
count

</emphasis>
 is less than or equal 

<emphasis id="em1009" effect="italics">

(note the relational operator that consists of a left angle bracket and an equal 
	character)

</emphasis>
 to the literal value 5, execute all of the 
statements that follow the colon at the same indentation level. 

</para>


	

<para id="p1025">
Stated differently, for as long as the conditional clause 

<emphasis id="em1010" effect="italics">
(count less 
	than or equal to 
	5)

</emphasis>
 continues to be true, execute all of the statements that follow the 
	colon at the same indentation level. When the conditional clause is no 
	longer true, skip the indented statements and transfer control to whatever follows the 
	indented statements.

</para>




</quote>




<para id="p1026">
In this case, there are three statements 

<emphasis id="em1011" effect="italics">
(followed by a comment)

</emphasis>
 at the same indentation level 
following the colon. The first of the three statements prints the current value 
stored in the variable named 

<emphasis id="strong1020" effect="bold">
count

</emphasis>
 as shown
by the second line of text in 

<link id="a1037" target-id="Figure_2">

Figure 2

</link>

.

</para>




</section>
<section id="h21011">
<title>
<emphasis id="Append_values_to_the_end_of_the_list" effect="bold">

Append values to the end of 
the list

</emphasis>


</title>




<para id="p1027">
You learned in an earlier module that a list is a 

<emphasis id="em1012" effect="italics">
mutable sequence

</emphasis>
 type. The 
term mutable means that the values stored in the list can be modified after the 
list is created.

</para>




<para id="p1028">
There are a dozen or more 


<link id="a1038" url="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations">

operations

</link>

 that can be performed on a 
list to modify its contents. One of those operations is 

<emphasis id="strong1021" effect="bold">
append(x)

</emphasis>
. 
This operation appends the value of 

<emphasis id="strong1022" effect="bold">
x

</emphasis>
 to the end of the list. 
For the time being, I am going to refer to 

<emphasis id="strong1023" effect="bold">
append(x)

</emphasis>
 as a 
method belonging to the list object.

</para>




<para id="p1029">
The second indented statement in 

<link id="a1039" target-id="Image_3">

Listing 2

</link>

 calls the 

<emphasis id="strong1024" effect="bold">
append

</emphasis>
 method on the 
list, appending the value currently stored in the variable named 

<emphasis id="strong1025" effect="bold">
count

</emphasis>
 
to the end of the list. This will increase the length of the list by one.

</para>




<quote id="blockquote1001" display="block">
Note that the 

<emphasis id="strong1026" effect="bold">
append

</emphasis>
 method is called on the list 
by joining the name of the list (

<emphasis id="strong1027" effect="bold">
aList

</emphasis>
) to the name of the


<emphasis id="strong1028" effect="bold">
append

</emphasis>
 method using a period as a joining operator. The item 
that is to be appended to the list 

<emphasis id="em1013" effect="italics">
(the value of 

</emphasis>
 

<emphasis id="strong1029" effect="bold">
<emphasis id="em1014" effect="italics">
count

</emphasis>
</emphasis>
) is 
passed as a parameter to the 

<emphasis id="strong1030" effect="bold">
append

</emphasis>
 method.

</quote>




</section>
<section id="h21012">
<title>
<emphasis id="Increment_the_count_variable" effect="bold">

Increment the counter variable

</emphasis>


</title>




<para id="p1030">
The last statement in the indented group of three statements increments or 
adds one to the value stored in the variable named 

<emphasis id="strong1031" effect="bold">
count

</emphasis>
. This 
statement retrieves the value stored in the variable named 

<emphasis id="strong1032" effect="bold">
count

</emphasis>
, 
adds one to that value, and stores the sum back in the variable named 

<emphasis id="strong1033" effect="bold">

count

</emphasis>
 replacing the value that was previously stored there.

</para>




<para id="p1031">
The comment following that statement shows a shorthand way to accomplish the 
exact same thing.

</para>




<para id="p1032">
Incrementing the 

<emphasis id="strong1034" effect="bold">
counter

</emphasis>
 variable is critical to the proper 
operation of the script. If the 

<emphasis id="strong1035" effect="bold">
counter

</emphasis>
 variable is not 
incremented within the body of the loop, it will remain less than 5 forever and 
the conditional clause at the top of the 

<emphasis id="strong1036" effect="bold">
while

</emphasis>
 loop 

<emphasis id="em1015" effect="italics">
(

<emphasis id="strong1037" effect="bold">
count

</emphasis>
 less than or 
equal to 5)

</emphasis>
 will be true forever. 
This will cause the loop to continue looping forever. This is often referred to 
an 

<emphasis id="em1016" effect="italics">
infinite loop

</emphasis>
.

</para>




<para id="p1033">
The code in 

<link id="a1040" target-id="Image_3">

Listing 2

</link>

 increments the counter variable once during each iteration 
of the loop. As you can see from the program output in 

<link id="a1041" target-id="Figure_2">

Figure 2

</link>

, this causes it 
to count from 0 through 5 inclusive. 

</para>




<para id="p1034">
Each time the last indented statement in 
the body of the loop finishes executing, control goes back to the top of the 
loop where the value of 

<emphasis id="strong1038" effect="bold">
count

</emphasis>
 is tested against the literal value 5. 


<emphasis id="em1017" effect="italics">
(You can see this happening by stepping through the visualization.)

</emphasis>
 When the 
count finally reaches 6, 

</para>




<list id="ul1009" list-type="bulleted">

	

<item id="li1036">
the conditional clause at the top of the loop will 
return 

<emphasis id="strong1039" effect="bold">
false

</emphasis>
, 

</item>


	

<item id="li1037">
the three statements in the body of the loop will 
be skipped, and 

</item>


	

<item id="li1038">
the 

<emphasis id="strong1040" effect="bold">
print

</emphasis>
 statement following the 

<emphasis id="strong1041" effect="bold">
while

</emphasis>
 loop 
structure will be executed.

</item>




</list>




</section>
<section id="h21013">
<title>
<emphasis id="Print_the_current_state_of_the_list" effect="bold">

Print the current state of the 
list

</emphasis>


</title>




<para id="p1035">
This causes the last statement in 

<link id="a1042" target-id="Image_3">

Listing 2

</link>

 to be executed. 
This statement prints the 
current state of the list. As you can see in 

<link id="a1043" target-id="Figure_2">

Figure 2

</link>

, the length of the list has 
been increased from the original length of 3 elements to a new length of 9 
elements. The list now 
contains the three original strings plus six new elements, which are the counter 
values from 0 through 5 inclusive.

</para>





</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1036">
I encourage you to copy the code from 

<link id="a1044" target-id="Image_3">

Listing 2

</link>

. Execute the code and confirm 
that you get the same results as those shown in 

<link id="a1045" target-id="Figure_2">

Figure 2

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




<para id="p1037">
I also encourage you to create and step through the


<link id="a1046" url="http://pythontutor.com/visualize.html#mode=display">

visualization

</link>

 
shown in 

<link id="a1047" target-id="Figure_3">

Figure 3

</link>

.

</para>


	

</section>
<section id="h11005">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1038">
This section contains a variety of miscellaneous information. 

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1042" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1010" list-type="bulleted">

					

<item id="li1039">
Module name: Itse1359-1210-The While Loop

</item>


					

<item id="li1040">
File: Itse1359-1210.htm


</item>


					

<item id="li1041">
Published: 10/26/14

</item>


					

<item id="li1042">
Revised: 01/31/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1043" effect="bold">
Disclaimers:

</emphasis>
<para id="p1039">
<emphasis id="strong1044" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1040">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1041">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1042">
<emphasis id="strong1045" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	



	

<para id="p1043">
-end- 

</para>






</section>
</content>




</document>