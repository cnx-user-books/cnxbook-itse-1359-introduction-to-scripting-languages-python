<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Itse1359-1240-The for Loop</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m51417</md:content-id>
  <md:title>Itse1359-1240-The for Loop</md:title>
  <md:abstract>This module explains the Python for loop and the Python range function</md:abstract>
  <md:uuid>a27e6cc1-2408-4951-8723-11c91637b624</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="What_you_have_learned">

What you have learned

</link>


</item>


		

<item id="li1002">
<link id="a1002" target-id="What_you_will_learn">

What you will learn

</link>


</item>


		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Images">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>



		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1006">
<link id="a1006" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1008">
<link id="a1008" target-id="Iterate_on_a_sequence">

Iterate on a sequence

</link>


</item>


		

<item id="li1009">
<link id="a1009" target-id="The_range_function">

The range function

</link>


</item>


	

</list>


	

</item>



	

<item id="li1010">
<link id="a1010" target-id="Visualize_the_programs">

Visualize the programs

</link>


</item>


	

<item id="li1011">
<link id="a1011" target-id="Run_the_program">

Run the programs

</link>


</item>



	

<item id="li1012">
<link id="a1012" target-id="Miscellaneous">

Miscellaneous

</link>


</item>





</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules on Python designed for 
teaching 

<emphasis id="em1000" effect="italics">
ITSE 1359 Introduction to Scripting Languages: Python

</emphasis>
 at Austin Community 
College in Austin, TX.

</para>




<section id="h21000">
<title>
<emphasis id="What_you_have_learned" effect="bold">

What you have learned

</emphasis>


</title>




<para id="p1001">
In the most recent modules you learned about the 

<emphasis id="strong1000" effect="bold">
while

</emphasis>
 loop,


<emphasis id="strong1001" effect="bold">
operators

</emphasis>
, and the 

<emphasis id="strong1002" effect="bold">
if

</emphasis>
 statement. While 
studying that material, you learned some other things as well such as the 
concepts of repetition, modularity, and decision logic.

</para>




</section>
<section id="h21001">
<title>
<emphasis id="What_you_will_learn" effect="bold">

What you will learn

</emphasis>


</title>




<para id="p1002">
You will learn about the 

<emphasis id="strong1003" effect="bold">
for

</emphasis>
 loop and the 

<emphasis id="strong1004" effect="bold">
range

</emphasis>
 
function in this module.

</para>


	

</section>
<section id="h21002">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
	and the Listings 
while you are reading about them.

</para>




<para id="p1004">
<emphasis id="em1001" effect="italics">
(Note to blind and visually impaired students: most of the Figures and all of the 
Listings in 
this module are presented in plain text format and should be accessible using an 
audio screen reader or a braille display. Note however that the required 
indentation may not be properly represented by an audio screen reader.)

</emphasis>
</para>


	

<section id="h31000">
<title>
<emphasis id="Images" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">



<item id="li1013">
<link id="a1013" target-id="Image_1">

Figure 1

</link>

. Syntax of a for loop statement. 

</item>




<item id="li1014">
<link id="a1014" target-id="Image_4">

Figure 2

</link>

. Output from the code in Listing 2.

</item>


	

</list>




</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1005" list-type="bulleted">



<item id="li1015">
<link id="a1015" target-id="Image_2">

Listing 1

</link>

. Application of a for loop to a list and a string.

</item>




<item id="li1016">
<link id="a1016" target-id="Image_3">

Listing 2

</link>

. Using the range function to control a for loop.

</item>




</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1005">
You learned about the 

<emphasis id="strong1005" effect="bold">
while

</emphasis>
 loop in the earlier module titled


<link id="a1017" url="http://cnx.org/contents/efa4d804-2068-4356-96c3-93eda155cbad">

Itse1359-1210-The while Loop

</link>

. Although the syntax of the 

<emphasis id="strong1006" effect="bold">
while

</emphasis>
 
loop in Python is different from the syntax of the 

<emphasis id="strong1007" effect="bold">
while

</emphasis>
 loop 
in other programming languages such as C, C++, C#, and Java, the behavior is very similar.

</para>




<para id="p1006">
You learned about the 

<emphasis id="strong1008" effect="bold">
if

</emphasis>
 statement in the earlier module 
titled 


<link id="a1018" url="http://cnx.org/contents/9e98cb96-b07c-427a-bc52-6b0e7fc4a4b0">

Itse1359-1230-The if Statement

</link>

. Once again, although the syntax of the


<emphasis id="strong1009" effect="bold">
if

</emphasis>
 statement in Python is different from the syntax of the 


<emphasis id="strong1010" effect="bold">
if

</emphasis>
 
statement in the other programming languages listed above, the behavior is very 
similar.

</para>




<para id="p1007">
That brings us to the 

<emphasis id="strong1011" effect="bold">
for

</emphasis>
 loop in Python. Neither the syntax 
nor the behavior of the Python 

<emphasis id="strong1012" effect="bold">
for

</emphasis>
 loop is similar to the 
syntax or the behavior of the primary 

<emphasis id="strong1013" effect="bold">
for

</emphasis>
 loop in those other 
languages. 

</para>




<para id="p1008">
However, some of those other languages 
have added a secondary 

<emphasis id="strong1014" effect="bold">
for

</emphasis>
 loop in recent years with behavior that is similar 
to the Python 

<emphasis id="strong1015" effect="bold">
for

</emphasis>
 loop. Also, the 

<emphasis id="strong1016" effect="bold">
range

</emphasis>
 
function can be used with a Python 

<emphasis id="strong1017" effect="bold">
for

</emphasis>
 loop to produce behavior 
that is similar to the behavior of the primary 

<emphasis id="strong1018" effect="bold">
for

</emphasis>
 loops in 
those other languages.

</para>


	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<section id="h21003">
<title>
<emphasis id="Iterate_on_a_sequence" effect="bold">

Iterate on a sequence

</emphasis>


</title>




<para id="p1009">
Python's 

<emphasis id="strong1019" effect="bold">
for

</emphasis>
 loop statement iterates over the items of any sequence 
	

<emphasis id="em1002" effect="italics">
(such as a list or a string)

</emphasis>
, in the order that they appear in the sequence. 
	The syntax of a 

<emphasis id="strong1020" effect="bold">
for

</emphasis>
 loop is shown in 

<link id="a1019" target-id="Image_1">


Figure 1

</link>

.

</para>


	

<table id="table1000" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Image_1" effect="bold">

Figure 1

</emphasis>

. Syntax of a for loop 
				statement.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">




<code id="pre1000" display="block">
for var in sequence:
  statement(s)
</code>





				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1010">
The words "

<emphasis id="strong1021" effect="bold">
for

</emphasis>
" and "

<emphasis id="strong1022" effect="bold">
in

</emphasis>
" are keywords 
	in the sequence. By that, I mean that they don't change from one script to 
	the next. The name of the variable 

<emphasis id="strong1023" effect="bold">
var

</emphasis>
, the name of the sequence, and the statements 
	are provided by the programmer and are subject to change from one script to 
	the next.

</para>




<para id="p1011">
When control enters the loop, the first item in the sequence is assigned to


<emphasis id="strong1024" effect="bold">
var

</emphasis>
. Then the statements in the body of the loop are executed. 
Those statements may or may not refer to the contents of 

<emphasis id="strong1025" effect="bold">
var

</emphasis>
, 
but very often will.

</para>




<para id="p1012">
After that, the next item in the sequence is assigned to 

<emphasis id="strong1026" effect="bold">
var

</emphasis>
 
and the statements in the body of the loop are executed. This process continues 
until every item in the sequence has been processed. 

</para>




<para id="p1013">
After all of the items in the sequence have been processed, control transfers 
to the next statement following the 

<emphasis id="strong1027" effect="bold">
for

</emphasis>
 loop statement. 

<emphasis id="em1003" effect="italics">

(You will learn in a future module that it is also possible to have an 

<emphasis id="strong1028" effect="bold">

else

</emphasis>
 clause on a 

<emphasis id="strong1029" effect="bold">
for

</emphasis>
 loop.)

</emphasis>
</para>




<para id="p1014">
<link id="a1020" target-id="Image_2">

Listing 1

</link>

 shows the application of a 

<emphasis id="strong1030" effect="bold">
for

</emphasis>
 loop to a list and 
then to a string extracted from the list.

</para>


	

<table id="table1001" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Image_2" effect="bold">

Listing 1

</emphasis>

. Application of a for 
				loop to a list and a string.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">




<code id="pre1001" display="block">
# Illustrates the for loop
#-------------------------

dogs = ["Affenpinscher","Afgan Hound","Akita"]

for breed in dogs:
  print(breed)
print("Length of dogs list = " + str(len(dogs)))

for letter in dogs[2]:
  print(letter)
print(dogs[2])
#------------------------------------------------------
#The output from this script is shown below.
#Do not copy the following text if you copy the script.
Affenpinscher
Afgan Hound
Akita
Length of dogs list = 3
A
k
i
t
a
Akita
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




<para id="p1015">
The output produced by the code in the top half of 

<link id="a1021" target-id="Image_2">

Listing 
1

</link>

 
is shown by the bottom half of 

<link id="a1022" target-id="Image_2">

Listing 1

</link>

.

</para>




<para id="p1016">
The script begins by creating and populating a list with the names of three 
breeds of dogs.

</para>




<para id="p1017">
The first 

<emphasis id="strong1031" effect="bold">
for

</emphasis>
 loop in 

<link id="a1023" target-id="Image_2">

Listing 1

</link>

 
iterates through the list extracting and printing the name of each breed on a 
new line. When the first 

<emphasis id="strong1032" effect="bold">
for

</emphasis>
 loop in 

<link id="a1024" target-id="Image_2">

Listing 
1

</link>

 terminates, 
the code gets and prints the length of the list.

</para>




<para id="p1018">
The second 

<emphasis id="strong1033" effect="bold">
for

</emphasis>
 loop gets and iterates through the string at 
index value 2 in the list 

<emphasis id="em1004" effect="italics">
("Akita")

</emphasis>
. It prints each letter from that string on a new line. When that


<emphasis id="strong1034" effect="bold">
for

</emphasis>
 loop terminates, the code in 

<link id="a1025" target-id="Image_2">

Listing 1

</link>

 
prints the contents of the string.

</para>


	

</section>
<section id="h21004">
<title>
<emphasis id="The_range_function" effect="bold">

The range function

</emphasis>


</title>




<para id="p1019">
The primary 

<emphasis id="strong1035" effect="bold">
for

</emphasis>
 loops in many other programming languages 
deal strictly with numeric sequences. The built-in 

<emphasis id="strong1036" effect="bold">
range

</emphasis>
 
function, when used with a Python 

<emphasis id="strong1037" effect="bold">
for

</emphasis>
 loop makes it possible to 
emulate that behavior.

</para>




<para id="p1020">
The 

<emphasis id="strong1038" effect="bold">
range

</emphasis>
 function returns an immutable sequence 
containing a series of increasing integer values. There are two overloaded 
versions of the range function:

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1017">
range(stop)

</item>


	

<item id="li1018">
range(start,stop[,step])

</item>




</list>




<para id="p1021">
The version with a single parameter returns a sequence containing the 
integers beginning with 0 and ending at one less than the value of 

<emphasis id="em1005" effect="italics">
stop

</emphasis>
. For 
example 

<emphasis id="strong1039" effect="bold">
range(6)

</emphasis>
 returns the following sequence:

</para>




<para id="p1022">
[0,1,2,3,4,5]

</para>




<para id="p1023">
The version of the 

<emphasis id="strong1040" effect="bold">
range

</emphasis>
 function with two and optionally three parameters returns a sequence that 
begins with 

<emphasis id="em1006" effect="italics">
start

</emphasis>
, ends just short of 

<emphasis id="em1007" effect="italics">
stop

</emphasis>
, and optionally increments by 


<emphasis id="em1008" effect="italics">
step

</emphasis>
. For 
example, 

<emphasis id="strong1041" effect="bold">
range(1,6,2)

</emphasis>
 returns the following sequence:

</para>




<para id="p1024">
[1,3,5]

</para>




<para id="p1025">
The sequence returned by range can be used to cause a for loop to iterate on 
the basis of a numeric index in much the same way that the primary 

<emphasis id="strong1042" effect="bold">
for

</emphasis>
 loop in 
C, C++, C#, and Java behaves. This is illustrated by the program in 

<link id="a1026" target-id="Image_3">


Listing 2

</link>

.

</para>


	

<table id="table1002" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Image_3" effect="bold">

Listing 2

</emphasis>

. Using the range 
				function to control a for loop.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">




<code id="pre1002" display="block">
# Illustrates the for loop and the range function
#------------------------------------------------

sum = 0
for cnt in range(5):
  sum += cnt
  print("cnt = " + str(cnt) + ", sum = " + str(sum))
print("======================")
#---------------------------------------------------------------

breed = "Affenpinscher"
for index in range(1,len(breed),2):
  print("Letter at index " + str(index) + " is " + breed[index])
print(breed)
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1026">
The output from the code in 

<link id="a1027" target-id="Image_3">

Listing 2

</link>

 is shown in 

<link id="a1028" target-id="Image_4">


	Figure 2

</link>

.

</para>




	

<table id="table1003" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Image_4" effect="bold">

Figure 2

</emphasis>

. Output from the code 
				in Listing 2.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">




<code id="pre1003" display="block">
cnt = 0, sum = 0
cnt = 1, sum = 1
cnt = 2, sum = 3
cnt = 3, sum = 6
cnt = 4, sum = 10
======================
Letter at index 1 is f
Letter at index 3 is e
Letter at index 5 is p
Letter at index 7 is n
Letter at index 9 is c
Letter at index 11 is e
Affenpinscher
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1027">
The code in the top half of 

<link id="a1029" target-id="Image_3">

Listing 2

</link>

 calls the 
	

<emphasis id="strong1043" effect="bold">
range

</emphasis>
 function to get an 
	immutable sequence containing the integers from 0 through 4 inclusive. The 
	

<emphasis id="strong1044" effect="bold">
for

</emphasis>
 loop iterates through that sequence, extracting, summing, and printing 
	the integer values and the sum of the values contained in the sequence.

</para>




<para id="p1028">
Note that the body of this 

<emphasis id="strong1045" effect="bold">
for

</emphasis>
 loop contains two statements 
at the same indentation level.

</para>




<para id="p1029">
The code in the bottom half of 

<link id="a1030" target-id="Image_3">

Listing 2

</link>

 calls the 


<emphasis id="strong1046" effect="bold">
range

</emphasis>
 function to get an 
immutable sequence containing the following integers:

</para>




<para id="p1030">
[1,3,5,7,9,11]

</para>




<para id="p1031">
The 

<emphasis id="strong1047" effect="bold">
for

</emphasis>
 loop iterates through that sequence and uses the integers contained 
in the sequence to extract and print corresponding letters from the string 
"Affenpinscher".

</para>




</section>
</section>
<section id="h11004">
<title>
<emphasis id="Visualize_the_programs" effect="bold">

Visualize the programs

</emphasis>


</title>




<para id="p1032">
I recommend that you create 


<link id="a1031" url="http://pythontutor.com/visualize.html#mode=display">

visualizations

</link>

 for the code in 


<link id="a1032" target-id="Image_2">

Listing 1

</link>

 and 

<link id="a1033" target-id="Image_3">


Listing 2

</link>

 and step through those programs one instruction at a time. As you 
do that, pay attention to the movements of the red and green arrows on the left, 
the diagram on the right, and the printed material at the bottom. That should 
help you to better understand the behavior of 

<emphasis id="strong1048" effect="bold">
for

</emphasis>
 loops both 
with and without the use of the 

<emphasis id="strong1049" effect="bold">
range

</emphasis>
 function.

</para>





</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the programs

</emphasis>


</title>





<para id="p1033">
I also encourage you to copy the code from 

<link id="a1034" target-id="Image_2">

Listing 1

</link>

 and 

<link id="a1035" target-id="Image_3">


Listing 2

</link>

. Execute the code and confirm 
that you get the same results as those shown in 

<link id="a1036" target-id="Image_2">

Listing 1

</link>

 and 

<link id="a1037" target-id="Image_4">


Figure 2

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1034">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1050" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1007" list-type="bulleted">

					

<item id="li1019">
Module name: Itse1359-1240-The for Loop

</item>


					

<item id="li1020">
File: Itse1359-1240.htm


</item>


					

<item id="li1021">
Published: 10/21/14

</item>


					

<item id="li1022">
Revised: 09/05/15

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1051" effect="bold">
Disclaimers:

</emphasis>
<para id="p1035">
<emphasis id="strong1052" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1036">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1037">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1038">
<emphasis id="strong1053" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	



	

<para id="p1039">
-end- 

</para>






</section>
</content>




</document>