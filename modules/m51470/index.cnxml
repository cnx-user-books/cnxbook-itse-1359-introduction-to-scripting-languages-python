<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Itse1359-1510-Reading and Writing Text Files</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m51470</md:content-id>
  <md:title>Itse1359-1510-Reading and Writing Text Files</md:title>
  <md:abstract>You will learn how to read, write, and append to text files using Python in this module.</md:abstract>
  <md:uuid>271e37d0-ea4c-47f4-81ec-ff70fe445ca9</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">


		

<item id="li1001">
<link id="a1001" target-id="What_you_will_learn">

What you will learn

</link>


</item>


		

<item id="li1002">
<link id="a1002" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1003">
<link id="a1003" target-id="Images">

Figures

</link>


</item>


			

<item id="li1004">
<link id="a1004" target-id="Listings">

Listings

</link>


</item>



		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1005">
<link id="a1005" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1007">
<link id="a1007" target-id="Open_a_text_file_for_writing">

Open a text file for writing

</link>


</item>


		

<item id="li1008">
<link id="a1008" target-id="Write_text_and_close_the_file">

Write text and close the file

</link>


</item>


		

<item id="li1009">
<link id="a1009" target-id="Read_and_print_the_file_contents_with_a_for_loop">

Read and print the file contents with a for loop

</link>


</item>


		

<item id="li1010">
<link id="a1010" target-id="Append_more_text_to_the_file">

Append more text to the file

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="Read_and_print_the_file_contents_with_a_while_loop">

Read and print the file contents with a while loop

</link>


</item>



	

</list>


	

</item>



	

<item id="li1012">
<link id="a1012" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="Complete_program_listings">

Complete program listing

</link>


</item>



	

<item id="li1014">
<link id="a1014" target-id="Miscellaneous">

Miscellaneous

</link>


</item>





</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules on Python designed for 
teaching 

<emphasis id="em1000" effect="italics">
ITSE 1359 Introduction to Scripting Languages: Python

</emphasis>
 at Austin Community 
College in Austin, TX.

</para>




<section id="h21000">
<title>
<emphasis id="What_you_will_learn" effect="bold">

What you will learn

</emphasis>


</title>




<para id="p1001">
You will learn how to read, write, and append to text files using Python in 
this module.

</para>


	

</section>
<section id="h21001">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
	and the Listings while you are reading about them.

</para>




<para id="p1003">
<emphasis id="em1001" effect="italics">
(Note to blind and visually impaired students: all of the Figures and 
Listings in 
this module are presented in plain text format and should be accessible using an 
audio screen reader or a braille display. Note however that the required 
indentation may not be properly represented by an audio screen reader.)

</emphasis>
</para>


	

<section id="h31000">
<title>
<emphasis id="Images" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">



<item id="li1015">
<link id="a1015" target-id="Image_4">

Figure 1

</link>

. Output from the code in Listing 3.

</item>






<item id="li1016">
<link id="a1016" target-id="Image_7">

Figure 2

</link>

. Output from the code in Listing 5.

</item>





<item id="li1017">
<link id="a1017" target-id="Image_9">

Figure 3

</link>

. Output produced by the code in Listing 6.

</item>


	

</list>




</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1005" list-type="bulleted">



<item id="li1018">
<link id="a1018" target-id="Image_1">

Listing 1

</link>

. Open a text file for writing. 

</item>




<item id="li1019">
<link id="a1019" target-id="Image_2">

Listing 2

</link>

. Write text and close the file.

</item>




<item id="li1020">
<link id="a1020" target-id="Image_3">

Listing 3

</link>

. Read and print the file contents with a for loop.

</item>




<item id="li1021">
<link id="a1021" target-id="Image_5">

Listing 4

</link>

. Append more text to the file.

</item>




<item id="li1022">
<link id="a1022" target-id="Image_6">

Listing 5

</link>

. Read and print the file contents with a while loop.

</item>




<item id="li1023">
<link id="a1023" target-id="Image_8">

Listing 6

</link>

. Complete program listing. 

</item>





</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1004">
From time to time you may need to read, write, or append to files. I will 
present and explain a relatively simple program in this module that will get you 
started down that path. However, this module is not intended to be a 
comprehensive tutorial on file i/o. Instead, I will refer you to other online 
resources for more information if and when you need it. The 
following web sites provide important information in this regard:

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1024">
<link id="a1024" url="http://www.tutorialspoint.com/python/python_files_io.htm">


	tutorialspoint -- Python Files I/O

</link>


</item>


	

<item id="li1025">

	

<link id="a1025" url="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files">


	The Python Tutorial -- Reading and Writing Files

</link>


</item>


	

<item id="li1026">
<link id="a1026" url="https://docs.python.org/2.4/lib/bltin-file-objects.html">

Python 
	Library Reference (version 2.3)

</link>


</item>




</list>


	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1005">
The program that I will present and explain in this module begins by 
	writing a text file named 

<emphasis id="strong1000" effect="bold">
"SampleTextFile.txt"

</emphasis>
 into the current directory 
	and populating it with five lines of text. If a file already exist having 
	that name in the current directory, it will be overwritten by the new file.

</para>




<para id="p1006">
Then the program uses a 

<emphasis id="strong1001" effect="bold">
for

</emphasis>
 loop as an iterator to read and print each line 
of text from the file.

</para>




<para id="p1007">
After that, the program appends two additional lines of text to the file and 
uses a 

<emphasis id="strong1002" effect="bold">
while

</emphasis>
 loop to read and print the seven lines of text from the file.

</para>




<para id="p1008">
A complete listing of the program is provided in 

<link id="a1027" target-id="Image_8">

Listing 
6

</link>

. The output from 
the program is shown in 

<link id="a1028" target-id="Image_9">

Figure 3

</link>

. As usual, I will break the program down and 
explain it in fragments. The first fragment is shown in 

<link id="a1029" target-id="Image_1">


Listing 1

</link>

.

</para>




<section id="h21002">
<title>
<emphasis id="Open_a_text_file_for_writing" effect="bold">

Open a text file for writing

</emphasis>


</title>




<para id="p1009">
<link id="a1030" target-id="Image_1">

Listing 1

</link>

 calls the built-in function named


<link id="a1031" url="https://docs.python.org/3/library/functions.html#open">

open

</link>

 to 
create and return a 

<emphasis id="strong1003" effect="bold">
file

</emphasis>
 object in 

<emphasis id="em1002" effect="italics">
write mode

</emphasis>
. The reference to 
the file object is stored in the variable named 

<emphasis id="strong1004" effect="bold">
theFile

</emphasis>
. The


<emphasis id="em1003" effect="italics">
write mode

</emphasis>
 is indicated by the 

<emphasis id="strong1005" effect="bold">
"w"

</emphasis>
 as the second 
parameter to the 

<emphasis id="strong1006" effect="bold">
open

</emphasis>
 function. The description of the


<link id="a1032" url="https://docs.python.org/3/library/functions.html#open">

open

</link>

 
function at 

<link id="a1033" url="https://docs.python.org/3/library/functions.html#open">

The 
Python Standard Library -- 2. Built-in Functions

</link>

 describes eight different modes that can be specified when a 

<emphasis id="strong1007" effect="bold">

file

</emphasis>
 object is created. The program in this module will use the 
following three modes:

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1027">
'w' -- open for writing, truncating the file first

</item>


	

<item id="li1028">
'r' -- open for reading (default)

</item>


	

<item id="li1029">
'a' -- open for writing, appending to the end of the file if it exists

</item>




</list>


	

<table id="table1000" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Image_1" effect="bold">

Listing 1

</emphasis>

. Open a text file for 
				writing.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">




<code id="pre1000" display="block">
#Open a file object for writing.
theFile = open("SampleTextFile.txt","w")
</code>





				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h21003">
<title>
<emphasis id="Write_text_and_close_the_file" effect="bold">

Write text and close the file

</emphasis>


</title>




<para id="p1010">
<link id="a1034" target-id="Image_2">

Listing 2

</link>

 calls the 


<link id="a1035" url="https://docs.python.org/2.4/lib/bltin-file-objects.html">

write

</link>

 method five times in succession to 
write five strings into the file.

</para>




	

<table id="table1001" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Image_2" effect="bold">

Listing 2

</emphasis>

. Write text and close 
				the file.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">




<code id="pre1001" display="block">
#Write several lines of text to the file. Note the requirement to explicitly
#provide the newline at the end of each line of text.
theFile.write("This is a sample text file.\n")
theFile.write("Second line of text.\n")
theFile.write("Third line.\n")
theFile.write("Fourth line.\n")
theFile.write("Last line.\n")

#Be sure to close the file
theFile.close()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1011">
Once you have a 

<emphasis id="strong1008" effect="bold">
file

</emphasis>
 object, there are a variety of 
	methods that you can call on that object, one of which is the method named
	

<emphasis id="strong1009" effect="bold">
write

</emphasis>
. The best description that I could find for that set 
	of methods is located at
	

<link id="a1036" url="https://docs.python.org/2.4/lib/bltin-file-objects.html">

File 
	Objects

</link>

, which is part of the documentation for Python version 2.3. 

<emphasis id="em1004" effect="italics">

	(Hopefully it is still correct for Python version 3.)

</emphasis>
</para>




<para id="p1012">
That document provides the following description for the 

<emphasis id="strong1010" effect="bold">
write

</emphasis>
 
method:

</para>




<quote id="blockquote1000" display="block">
Write a string to the file. There is no return value. Due to buffering, the string may not actually show up in the file until the flush() or close() method is called. 


</quote>




<para id="p1013">
<link id="a1037" target-id="Image_2">

Listing 2

</link>

 calls the 

<emphasis id="strong1011" effect="bold">
close

</emphasis>
 method on the file after the strings are written to 
the file to ensure that the data is actually moved from the output buffer into 
the file. The description of the 

<emphasis id="strong1012" effect="bold">
close

</emphasis>
 method at
	

<link id="a1038" url="https://docs.python.org/2.4/lib/bltin-file-objects.html">

File 
Object

</link>

 reads as 
follows:

</para>




<quote id="blockquote1001" display="block">
Close the file. A closed file cannot be read or written any more. Any operation which requires that the file be open will raise a ValueError after the file has been closed. Calling close() more than once is allowed. 


</quote>




</section>
<section id="h21004">
<title>
<emphasis id="Read_and_print_the_file_contents_with_a_for_loop" effect="bold">

Read and print 
the file contents with a for loop

</emphasis>


</title>




<para id="p1014">
<link id="a1039" target-id="Image_3">

Listing 3

</link>

 shows one way to read the contents of a text file, line-by-line, 
using a 

<emphasis id="strong1013" effect="bold">
for

</emphasis>
 loop as an iterator. Note that the "r" mode is the default
but it is shown here for clarity.

</para>




	

<table id="table1002" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Image_3" effect="bold">

Listing 3

</emphasis>

. Read and print the 
				file contents with a for loop.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">




<code id="pre1002" display="block">
#Open the file object in read mode. 
theFile = open("SampleTextFile.txt","r")

#Read and print the lines of text.
for line in theFile:
  print(line,end='')

#Close the file
theFile.close()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1015">
The output produced by the code in 

<link id="a1040" target-id="Image_3">

Listing 3

</link>

 is shown in 

<link id="a1041" target-id="Image_4">


	Figure 1

</link>

. As 
	you can see, the output matches the text written into the file in 

<link id="a1042" target-id="Image_2">


	Listing 2

</link>

.

</para>




	

<table id="table1003" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Image_4" effect="bold">

Figure 1

</emphasis>

. Output from the code 
				in Listing 3.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">




<code id="pre1003" display="block">
This is a sample text file.
Second line of text.
Third line.
Fourth line.
Last line.
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1016">
The syntax of the call to the 

<emphasis id="strong1014" effect="bold">
print

</emphasis>
 function with two 
	parameters in 

<link id="a1043" target-id="Image_3">

Listing 3

</link>

 is probably different from what you have seen in my 
	previous modules. By default, the 

<emphasis id="strong1015" effect="bold">
print

</emphasis>
 function 
	terminates each output line with a 

<emphasis id="em1005" effect="italics">
newline

</emphasis>
. Because the lines of 
	text in the file already contain a newline, without the second parameter 
	shown in 

<link id="a1044" target-id="Image_3">

Listing 3

</link>

, the output shown in 

<link id="a1045" target-id="Image_4">


	Figure 1

</link>

 would be double-spaced. The 
	inclusion of the second parameter in the call to the 

<emphasis id="strong1016" effect="bold">
print

</emphasis>
 
	function in 

<link id="a1046" target-id="Image_3">

Listing 3

</link>

 prevents the 

<emphasis id="strong1017" effect="bold">
print

</emphasis>
 function from 
	inserting an extra newline and inserts an empty string instead.

</para>




</section>
<section id="h21005">
<title>
<emphasis id="Append_more_text_to_the_file" effect="bold">

Append more text to the file

</emphasis>


</title>




<para id="p1017">
The code in 

<link id="a1047" target-id="Image_5">

Listing 4

</link>

 begins by printing a blank line to cause the output shown 
in 

<link id="a1048" target-id="Image_9">

Figure 3

</link>

 to be more readable.

</para>




<para id="p1018">
Then the code in 

<link id="a1049" target-id="Image_5">

Listing 4

</link>

 

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1030">
re-opens the file for appending,

</item>


	

<item id="li1031">
writes two additional text lines into the file, and

</item>


	

<item id="li1032">
closes the file.

</item>




</list>



	

<table id="table1004" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Image_5" effect="bold">

Listing 4

</emphasis>

. Append more text to 
				the file.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">




<code id="pre1004" display="block">
print()#blank line to separate the output text

#Append some text to the file.
#Open the file object for appending.
theFile = open("SampleTextFile.txt","a")

#Append two more lines of text to the file.
theFile.write("First appended line.\n")
theFile.write("Second appended line.\n")

#Close the file
theFile.close()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h21006">
<title>
<emphasis id="Read_and_print_the_file_contents_with_a_while_loop" effect="bold">

Read and 
	print the file contents with a while loop

</emphasis>


</title>




<para id="p1019">
The 

<emphasis id="strong1018" effect="bold">
readline

</emphasis>
 method of a 

<emphasis id="strong1019" effect="bold">
file

</emphasis>
 object will 
read and return the next line from the file. An empty string is returned when 
the 

<emphasis id="em1006" effect="italics">
end of file

</emphasis>
 is encountered. 

<emphasis id="em1007" effect="italics">
(There are some subtle ramifications 
that you can learn about at 

</emphasis>

	

<link id="a1050" url="https://docs.python.org/2.4/lib/bltin-file-objects.html">


<emphasis id="em1008" effect="italics">
File 
	Objects

</emphasis>
</link>


<emphasis id="em1009" effect="italics">
.)

</emphasis>
</para>




<para id="p1020">
The code in 

<link id="a1051" target-id="Image_6">

Listing 5

</link>

 uses the 

<emphasis id="strong1020" effect="bold">
readline

</emphasis>
 method in a 


<emphasis id="strong1021" effect="bold">
while

</emphasis>
 loop to read and 
print each line of text in the file.

</para>




	

<table id="table1005" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Image_6" effect="bold">

Listing 5

</emphasis>

. Read and print the 
				file contents with a while loop.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">




<code id="pre1005" display="block">
#Open the file object in default read mode.
theFile = open("SampleTextFile.txt")

#Read and print the lines of text using a different approach.
line = theFile.readline()
print(line,end='')
while line != "":
    line = theFile.readline()
    print(line,end='')

#Close the file
theFile.close()
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1021">
<link id="a1052" target-id="Image_7">

Figure 2

</link>

 shows the output produced by the code in 

<link id="a1053" target-id="Image_6">


	Listing 5

</link>

. 

</para>













	

<table id="table1006" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Image_7" effect="bold">

Figure 2

</emphasis>

. Output from the code 
				in Listing 5.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">




<code id="pre1006" display="block">
This is a sample text file.
Second line of text.
Third line.
Fourth line.
Last line.
First appended line.
Second appended line.
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1022">
If you compare 

<link id="a1054" target-id="Image_7">

Figure 2

</link>

 with 

<link id="a1055" target-id="Image_4">


	Figure 1

</link>

, you will see that the two lines of 
	text that were appended by the code in 

<link id="a1056" target-id="Image_5">

Listing 4

</link>

 are shown in 

<link id="a1057" target-id="Image_7">


	Figure 2

</link>

.

</para>





</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1023">
I encourage you to copy the code from 

<link id="a1058" target-id="Image_8">

Listing 6

</link>

. Execute the code and confirm 
that you get the same results as those shown in 

<link id="a1059" target-id="Image_9">

Figure 3

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




</section>
<section id="h11005">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1024">
A complete listing of the program discussed in this module is provided in 


<link id="a1060" target-id="Image_8">

Listing 6

</link>

. The output produced by this program is shown in 

<link id="a1061" target-id="Image_9">


Figure 3

</link>

.

</para>





<para id="p1025">
<emphasis id="strong1022" effect="bold">
<emphasis id="Image_8" effect="bold">

Listing 6

</emphasis>

. Complete 
				program listing.

</emphasis>
</para>






<code id="pre1007" display="block">
# Illustrates how to write, read, and append to a text file.
#---------------------------------------------------------------------------

#Open a file object for writing.
theFile = open("SampleTextFile.txt","w")

#Write several lines of text to the file. Note the requirement to explicitly
#provide the newline at the end of each line of text.
theFile.write("This is a sample text file.\n")
theFile.write("Second line of text.\n")
theFile.write("Third line.\n")
theFile.write("Fourth line.\n")
theFile.write("Last line.\n")
#Be sure to close the file
theFile.close()

#Open the file object in read mode. Note that the "r" mode is the default
#but it is shown here for clarity.
theFile = open("SampleTextFile.txt","r")

#Read and print the lines of text.
for line in theFile:
  print(line,end='')

#Close the file
theFile.close()

print()#blank line to separate the output text
#Append some text to the file.
#Open the file object for appending.
theFile = open("SampleTextFile.txt","a")

#Append two more lines of text to the file.
theFile.write("First appended line.\n")
theFile.write("Second appended line.\n")

#Close the file
theFile.close()

#Open the file object in default read mode.
theFile = open("SampleTextFile.txt")

#Read and print the lines of text using a different approach.
line = theFile.readline()
print(line,end='')
while line != "":
    line = theFile.readline()
    print(line,end='')

#Close the file
theFile.close()
</code>





	

	

<table id="table1007" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Image_9" effect="bold">

Figure 3

</emphasis>

. Output 
				produced by the code in Listing 6.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">




<code id="pre1008" display="block">
This is a sample text file.
Second line of text.
Third line.
Fourth line.
Last line.

This is a sample text file.
Second line of text.
Third line.
Fourth line.
Last line.
First appended line.
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>


	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1026">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1023" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1009" list-type="bulleted">

					

<item id="li1033">
Module name: Itse1359-1510-Reading and Writing Text 
					Files

</item>


					

<item id="li1034">
File: Itse1359-1510.htm


</item>


					

<item id="li1035">
Published: 10/28/14

</item>




<item id="li1036">
Revised: 02/08/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1024" effect="bold">
Disclaimers:

</emphasis>
<para id="p1027">
<emphasis id="strong1025" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1028">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1029">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1030">
<emphasis id="strong1026" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





<para id="p1031">
-end- 

</para>






</section>
</content>




</document>